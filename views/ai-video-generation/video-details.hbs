<!DOCTYPE html>
<html lang='en'>

<head>
  {{> head}}
  <style>
    .video-container {
      margin-top: 20px;
      position: relative;
      width: 100%;
      max-width: 100%;
      overflow: hidden;
    }

    .video-wrapper {
      position: relative;
      padding-bottom: 56.25%;
      /* 16:9 aspect ratio */
      height: 0;
      overflow: hidden;
    }

    .video-wrapper video {
      position: absolute;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      object-fit: contain;
      background-color: #000;
    }

    .detail-card {
      margin-bottom: 20px;
      width: 100%;
    }

    .text-item {
      margin-bottom: 10px;
      padding: 10px;
      background-color: #f8f9fa;
      border-radius: 4px;
    }

    .generate-video-btn {
      margin-top: 20px;
      margin-bottom: 30px;
    }

    .table-responsive {
      width: 100%;
    }

    .btn-generate {
      padding: 15px 30px;
      font-size: 1.25rem;
    }

    .action-buttons {
      display: flex;
      justify-content: center;
      gap: 15px;
    }

    .series-badge {
      display: inline-block;
      margin-left: 10px;
      padding: 5px 10px;
      background-color: #6c757d;
      color: white;
      font-size: 0.8rem;
      border-radius: 20px;
      vertical-align: middle;
    }

    .type-badge {
      background-color: #007bff;
    }

    .series-link {
      color: white;
      text-decoration: none;
    }

    .series-link:hover {
      text-decoration: underline;
    }

    .danger-zone {
      margin-top: 40px;
      padding: 20px;
      border: 1px solid #dc3545;
      border-radius: 4px;
      background-color: #f8d7da;
    }

    .danger-zone h4 {
      color: #dc3545;
      margin-bottom: 15px;
    }

    .btn-delete {
      background-color: #dc3545;
      border-color: #dc3545;
    }

    .btn-delete:hover {
      background-color: #c82333;
      border-color: #bd2130;
    }

    /* Clickable table rows styling */
    .clickable-row {
      cursor: pointer;
    }

    .clickable-row:hover {
      background-color: rgba(0, 0, 0, 0.05) !important;
    }

    .w-100 {
      width: 100% !important;
    }

    .table-striped tbody tr:nth-of-type(odd) {
      background-color: #f9f9f9;
    }

    td {
      vertical-align: middle;
      text-align: center;
    }

    .description-card {
      margin-top: 20px;
      margin-bottom: 20px;
    }

    .description-content {
      position: relative;
      padding: 15px;
      background-color: #f8f9fa;
      border-radius: 4px;
      font-style: italic;
    }

    .copy-btn {
      position: absolute;
      top: 10px;
      right: 10px;
      background: transparent;
      border: none;
      cursor: pointer;
      color: #6c757d;
    }

    .copy-btn:hover {
      color: #0d6efd;
    }

    .copy-success {
      color: #198754;
    }

    .description-header {
      display: flex;
      justify-content: space-between;
      align-items: center;
    }

    .regenerate-btn {
      font-size: 0.9rem;
    }

    .mx-3 {
      margin-left: 1rem !important;
      margin-right: 1rem !important;
    }

    .my-3 {
      margin-top: 1rem !important;
      margin-bottom: 1rem !important;
    }

    input[type="checkbox"] {
      width: 20px;
      height: 20px;
    }
  </style>
</head>

<body>
  <div class="container mt-4">
    {{> navmenu}}

    <h1>
      {{title}}
      {{#if videoGeneration.series}}
      <span class="series-badge">
        Series: <a href="/videos/list?series={{videoGeneration.series}}"
          class="series-link">{{videoGeneration.series}}</a>
      </span>
      {{/if}}
      {{#if videoGeneration.type}}
      <span class="series-badge type-badge">
        Type: <a href="/videos/list?type={{videoGeneration.type}}" class="series-link">{{videoGeneration.type}}</a>
      </span>
      {{/if}}
    </h1>

    {{#if videoGeneration}}
    <div class="text-center generate-video-btn">
      <div class="form-check form-check-inline align-middle mx-3 my-3">
        <input class="form-check-input" type="checkbox" id="add-to-be-continued" value="true">
        <label class="form-check-label" for="add-to-be-continued">Añadir 'To be continued...' al final del
          vídeo</label>
      </div>
      <div class="form-check form-check-inline align-middle mx-3 my-3">
        <input class="form-check-input" type="checkbox" id="add-the-end" value="true">
        <label class="form-check-label" for="add-the-end">Añadir 'The End' al final del vídeo</label>
      </div>
      <div class="action-buttons">
        <button id="select-all-btn" class="btn btn-secondary btn-lg">Select All Items</button>

        <button id="generate-video-btn" class="btn btn-primary btn-lg btn-generate">Generate Video</button>
        {{#if videoGeneration.url}}
        <button id="mark-uploaded-btn" class="btn btn-warning btn-lg" {{#if (eq videoGeneration.status 'uploaded'
          )}}disabled{{/if}}>
          Mark as Uploaded {{#if (eq videoGeneration.status 'uploaded')}}✓{{/if}}
        </button>
        {{/if}}
      </div>
      <div id="generate-status" class="mt-2"></div>
    </div>
    {{#if videoGeneration.url}}
    <div class="card detail-card">
      <div class="card-header">
        <h5>Generated Video</h5>
      </div>
      <div class="card-body video-container">
        <div class="video-wrapper">
          <video controls>
            <source src="{{videoGeneration.url}}" type="video/mp4">
            Your browser does not support the video tag.
          </video>
        </div>
      </div>
    </div>
    {{/if}}

    {{#if videoGeneration.url}}
    <div class="card description-card">
      <div class="card-header description-header">
        <h5>AI Generated Description</h5>
        <button id="regenerate-description-btn" class="btn btn-outline-primary btn-sm regenerate-btn">
          <i class="fas fa-sync-alt"></i> Regenerate Description
        </button>
      </div>
      <div class="card-body">
        <div id="description-container">
          {{#if videoGeneration.description}}
          <div class="description-content" id="video-description">
            {{videoGeneration.description}}
            <button class="copy-btn" id="copy-description-btn" title="Copy to clipboard">
              <i class="fas fa-copy"></i>
            </button>
          </div>
          {{else}}
          <div class="alert alert-info">No description available. Click "Regenerate Description" to create one.</div>
          {{/if}}
        </div>
      </div>
    </div>
    {{/if}}

    {{#if videoGeneration.texts.length}}
    <div class="card detail-card">
      <div class="card-header">
        <h5>Text Prompts</h5>
      </div>
      <div class="card-body">
        {{#each videoGeneration.texts}}
        <div class="text-item">
          <strong>Text {{add @index 1}}:</strong> {{this}}
        </div>
        {{/each}}
      </div>
    </div>
    {{/if}}

    {{#if videoGeneration.error}}
    <div class="card detail-card bg-light">
      <div class="card-header bg-danger text-white">
        <h5>Error Details</h5>
      </div>
      <div class="card-body">
        <pre class="text-danger">{{videoGeneration.error}}</pre>
      </div>
    </div>
    {{/if}}

    {{#if images.length}}
    <div class="card detail-card">
      <div class="card-header">
        <h5>Generated Images</h5>
      </div>
      <div class="card-body">
        <div class="table-responsive">
          <table class="table table-striped w-100" id="images-table">
            <thead>
              <tr>
                <th><input type="checkbox" id="select-all-images" class="form-check-input"></th>
                <th>Preview</th>
                <th>Prompt</th>
                <th>Created At</th>
                <th>Status</th>
                <th>Actions</th>
              </tr>
            </thead>
            <tbody>
              {{#each images}}
              <tr class="clickable-row" data-href="/images/list/{{this._id}}">
                <td onclick="event.stopPropagation()">
                  {{#if this.url}}
                  <input type="checkbox" class="form-check-input image-checkbox" data-id="{{this._id}}">
                  {{else}}
                  <input type="checkbox" disabled class="form-check-input">
                  {{/if}}
                </td>
                <td>
                  {{#if this.url}}
                  <img src="{{this.url}}" alt="Generated image" style="max-width: 150px; max-height: 150px;"
                    class="img-thumbnail">
                  {{else}}
                  <span class="badge bg-secondary">No image</span>
                  {{/if}}
                </td>
                <td>{{truncate this.text 100}}</td>
                <td>{{formatDate this.createdAt}}</td>
                <td>
                  <span
                    class="badge {{#if this.error}}bg-danger{{else if this.url}}bg-success{{else}}bg-warning{{/if}}">
                    {{#if this.error}}Failed{{else if this.url}}✓{{else}}⌛{{/if}}
                  </span>
                </td>
                <td onclick="event.stopPropagation()">
                  {{#if this.url}}
                  <a href="{{this.url}}" class="btn btn-sm btn-primary" download>Download</a>
                  {{/if}}
                </td>
              </tr>
              {{/each}}
            </tbody>
          </table>
        </div>
      </div>
    </div>
    {{/if}}

    {{#if audio.length}}
    <div class="card detail-card">
      <div class="card-header">
        <h5>Generated Audio</h5>
      </div>
      <div class="card-body">
        <div class="table-responsive">
          <table class="table table-striped w-100" id="audio-table">
            <thead>
              <tr>
                <th><input type="checkbox" id="select-all-audio" class="form-check-input"></th>
                <th>Audio</th>
                <th>Text</th>
                <th>Created At</th>
                <th>Status</th>
                <th>Actions</th>
              </tr>
            </thead>
            <tbody>
              {{#each audio}}
              <tr class="clickable-row" data-href="/audios/list/{{this._id}}">
                <td onclick="event.stopPropagation()">
                  {{#if this.url}}
                  <input type="checkbox" class="form-check-input audio-checkbox" data-id="{{this._id}}">
                  {{else}}
                  <input type="checkbox" disabled class="form-check-input">
                  {{/if}}
                </td>
                <td>
                  {{#if this.url}}
                  <audio controls style="max-width: 200px;" onclick="event.stopPropagation()">
                    <source src="{{this.url}}" type="audio/mpeg">
                    Your browser does not support the audio element.
                  </audio>
                  {{else}}
                  <span class="badge bg-secondary">No audio</span>
                  {{/if}}
                </td>
                <td>{{truncate this.text 100}}</td>
                <td>{{formatDate this.createdAt}}</td>
                <td>
                  <span
                    class="badge {{#if this.error}}bg-danger{{else if this.url}}bg-success{{else}}bg-warning{{/if}}">
                    {{#if this.error}}Failed{{else if this.url}}✓{{else}}⌛{{/if}}
                  </span>
                </td>
                <td onclick="event.stopPropagation()">
                  {{#if this.url}}
                  <a href="{{this.url}}" class="btn btn-sm btn-primary" download>Download</a>
                  {{/if}}
                </td>
              </tr>
              {{/each}}
            </tbody>
          </table>
        </div>
      </div>
    </div>
    {{/if}}



    <div class="danger-zone">
      <h4>Danger Zone</h4>
      <p>This will permanently delete this video and all its related resources (images and audio). This action cannot be
        undone.</p>
      <button id="delete-video-btn" class="btn btn-delete btn-lg">Delete Video</button>
    </div>

    {{else}}
    <div class="alert alert-danger">
      Video generation not found or an error occurred.
    </div>
    {{/if}}

    <div class="mt-4">
      <a href="/videos/list" class="btn btn-secondary">Back to List</a>
    </div>
  </div>

  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.bundle.min.js"></script>
  <script>
    document.addEventListener('DOMContentLoaded', function () {
      // Handle clickable rows
      document.querySelectorAll('.clickable-row').forEach(row => {
        row.addEventListener('click', function () {
          window.location.href = this.dataset.href;
        });
      });

      // Select all checkboxes functionality
      const selectAllImages = document.getElementById('select-all-images');
      const selectAllAudio = document.getElementById('select-all-audio');
      const selectAllBtn = document.getElementById('select-all-btn');

      if (selectAllImages) {
        selectAllImages.addEventListener('change', function () {
          const checkboxes = document.querySelectorAll('.image-checkbox:not([disabled])');
          checkboxes.forEach(checkbox => {
            checkbox.checked = selectAllImages.checked;
          });
        });
      }

      if (selectAllAudio) {
        selectAllAudio.addEventListener('change', function () {
          const checkboxes = document.querySelectorAll('.audio-checkbox:not([disabled])');
          checkboxes.forEach(checkbox => {
            checkbox.checked = selectAllAudio.checked;
          });
        });
      }

      if (selectAllBtn) {
        selectAllBtn.addEventListener('click', function () {
          // Select all images
          if (selectAllImages) {
            selectAllImages.checked = true;
            const imageCheckboxes = document.querySelectorAll('.image-checkbox:not([disabled])');
            imageCheckboxes.forEach(checkbox => {
              checkbox.checked = true;
            });
          }

          // Select all audio
          if (selectAllAudio) {
            selectAllAudio.checked = true;
            const audioCheckboxes = document.querySelectorAll('.audio-checkbox:not([disabled])');
            audioCheckboxes.forEach(checkbox => {
              checkbox.checked = true;
            });
          }
        });
      }

      // Generate video button functionality
      const generateBtn = document.getElementById('generate-video-btn');
      if (generateBtn) {
        generateBtn.addEventListener('click', async function () {
          const selectedImages = Array.from(document.querySelectorAll('.image-checkbox:checked'))
            .map(checkbox => checkbox.dataset.id);

          const selectedAudio = Array.from(document.querySelectorAll('.audio-checkbox:checked'))
            .map(checkbox => checkbox.dataset.id);

          const addToBeContinued = document.getElementById('add-to-be-continued').checked;
          const addTheEnd = document.getElementById('add-the-end').checked;

          if (selectedImages.length === 0 || selectedAudio.length === 0) {
            document.getElementById('generate-status').innerHTML =
              '<div class="alert alert-danger">Please select at least one image and one audio file</div>';
            return;
          }

          const videoId = '{{videoGeneration._id}}';

          try {
            document.getElementById('generate-status').innerHTML =
              '<div class="alert alert-info">Generating video... Please wait</div>';

            const response = await fetch('/video-generation', {
              method: 'POST',
              headers: {
                'Content-Type': 'application/json',
              },
              body: JSON.stringify({
                videoId,
                images: selectedImages,
                audios: selectedAudio,
                addToBeContinued,
                addTheEnd
              })
            });

            const result = await response.json();

            if (response.ok) {
              document.getElementById('generate-status').innerHTML =
                '<div class="alert alert-success">Video generation started successfully!</div>';
            } else {
              document.getElementById('generate-status').innerHTML =
                `<div class="alert alert-danger">Error: ${result.message || 'Failed to start video generation'}</div>`;
            }
          } catch (error) {
            document.getElementById('generate-status').innerHTML =
              `<div class="alert alert-danger">Error: ${error.message}</div>`;
          }
        });
      }

      // Mark as uploaded button functionality
      const markUploadedBtn = document.getElementById('mark-uploaded-btn');
      if (markUploadedBtn) {
        markUploadedBtn.addEventListener('click', async function () {
          const videoId = '{{videoGeneration._id}}';

          try {
            markUploadedBtn.disabled = true;
            markUploadedBtn.innerHTML = 'Marking as uploaded...';

            const response = await fetch(`/videos/${videoId}/mark-uploaded`, {
              method: 'POST',
              headers: {
                'Content-Type': 'application/json',
              }
            });

            const result = await response.json();

            if (result.success) {
              markUploadedBtn.innerHTML = 'Mark as Uploaded ✓';
              document.getElementById('generate-status').innerHTML =
                '<div class="alert alert-success">Video marked as uploaded successfully!</div>';
              setTimeout(() => {
                window.location.reload();
              }, 1500);
            } else {
              markUploadedBtn.disabled = false;
              markUploadedBtn.innerHTML = 'Mark as Uploaded';
              document.getElementById('generate-status').innerHTML =
                `<div class="alert alert-danger">Error: ${result.message || 'Failed to mark video as uploaded'}</div>`;
            }
          } catch (error) {
            markUploadedBtn.disabled = false;
            markUploadedBtn.innerHTML = 'Mark as Uploaded';
            document.getElementById('generate-status').innerHTML =
              `<div class="alert alert-danger">Error: ${error.message}</div>`;
          }
        });
      }

      // Delete video button functionality
      const deleteBtn = document.getElementById('delete-video-btn');
      if (deleteBtn) {
        deleteBtn.addEventListener('click', async function () {
          if (!confirm('Are you sure you want to delete this video and all its related resources? This action cannot be undone.')) {
            return;
          }

          const videoId = '{{videoGeneration._id}}';

          try {
            const response = await fetch(`/videos/${videoId}`, {
              method: 'DELETE',
              headers: {
                'Content-Type': 'application/json',
              }
            });

            const result = await response.json();

            if (result.success) {
              alert('Video and related resources deleted successfully');
              window.location.href = '/videos/list';
            } else {
              alert(`Failed to delete: ${result.message || 'Unknown error'}`);
            }
          } catch (error) {
            alert(`Error: ${error.message}`);
          }
        });
      }

      // Regenerate description functionality
      const regenerateBtn = document.getElementById('regenerate-description-btn');
      if (regenerateBtn) {
        regenerateBtn.addEventListener('click', async function () {
          try {
            const videoId = '{{videoGeneration._id}}';
            regenerateBtn.disabled = true;
            regenerateBtn.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Generating...';

            document.getElementById('description-container').innerHTML =
              '<div class="alert alert-info">Generating new description. This may take a moment...</div>';

            const response = await fetch(`/videos/${videoId}/regenerate-description`, {
              method: 'POST',
              headers: {
                'Content-Type': 'application/json',
              }
            });

            const result = await response.json();

            if (result.success) {
              document.getElementById('generate-status').innerHTML =
                '<div class="alert alert-success">Description regenerated successfully!</div>';

              // Reload the page to show the new description
              setTimeout(() => {
                window.location.reload();
              }, 1500);
            } else {
              regenerateBtn.disabled = false;
              regenerateBtn.innerHTML = '<i class="fas fa-sync-alt"></i> Regenerate Description';

              document.getElementById('generate-status').innerHTML =
                `<div class="alert alert-danger">Error: ${result.message || 'Failed to regenerate description'}</div>`;
            }
          } catch (error) {
            regenerateBtn.disabled = false;
            regenerateBtn.innerHTML = '<i class="fas fa-sync-alt"></i> Regenerate Description';

            document.getElementById('generate-status').innerHTML =
              `<div class="alert alert-danger">Error: ${error.message}</div>`;
          }
        });
      }

      // Copy description functionality
      const copyBtn = document.getElementById('copy-description-btn');
      if (copyBtn) {
        copyBtn.addEventListener('click', function () {
          const descriptionText = document.getElementById('video-description').innerText.replace('copy', '').trim();
          navigator.clipboard.writeText(descriptionText)
            .then(() => {
              copyBtn.innerHTML = '<i class="fas fa-check copy-success"></i>';
              setTimeout(() => {
                copyBtn.innerHTML = '<i class="fas fa-copy"></i>';
              }, 2000);
            })
            .catch(err => {
              console.error('Error copying text: ', err);
              alert('Failed to copy description. Please try again.');
            });
        });
      }
    });
  </script>
</body>

</html>