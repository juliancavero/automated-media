<html lang='en'>

<head>
    {{> head}}
    <style>
        .form-container {
            margin-bottom: 20px;
        }

        .text-entries {
            margin-bottom: 20px;
        }

        .prompt-entry {
            position: relative;
            padding: 15px;
            background-color: #f9f9f9;
            border: 1px solid #ddd;
            border-radius: 4px;
            margin-bottom: 15px;
        }

        .prompt-pair {
            display: flex;
            gap: 15px;
        }

        .prompt-box {
            flex: 1;
        }

        .remove-btn {
            position: absolute;
            top: 5px;
            right: 5px;
            background-color: #dc3545;
            color: white;
            border: none;
            border-radius: 50%;
            width: 25px;
            height: 25px;
            display: flex;
            align-items: center;
            justify-content: center;
            cursor: pointer;
        }

        .form-group {
            margin-bottom: 15px;
        }

        label {
            display: block;
            margin-bottom: 5px;
            font-weight: bold;
        }

        textarea {
            width: 100%;
            padding: 10px;
            border: 1px solid #ddd;
            border-radius: 4px;
            resize: vertical;
            min-height: 80px;
            font-family: inherit;
        }

        .btn-add {
            background-color: #28a745;
            color: white;
            max-width: 200px;
            margin: 0 auto;
            display: block;
        }

        .btn-add:hover {
            background-color: #218838;
        }

        .submit-container {
            text-align: center;
            margin-top: 20px;
        }

        .loading {
            display: none;
            text-align: center;
            padding: 20px;
            font-style: italic;
            color: #666;
        }

        .result-container {
            display: none;
            margin-top: 20px;
            padding: 15px;
            background-color: #d4edda;
            border: 1px solid #c3e6cb;
            border-radius: 4px;
            color: #155724;
        }

        .error-container {
            display: none;
            margin-top: 20px;
            padding: 15px;
            background-color: #f8d7da;
            border: 1px solid #f5c6cb;
            border-radius: 4px;
            color: #721c24;
        }

        /* Collapsible section styles */
        .section-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            cursor: pointer;
            margin-bottom: 10px;
        }

        .section-header h3 {
            margin: 0;
        }

        .toggle-icon {
            font-size: 1.2em;
            transition: transform 0.3s ease;
        }

        .toggle-icon.collapsed {
            transform: rotate(180deg);
        }

        .section-content {
            overflow: hidden;
            transition: max-height 0.3s ease;
            max-height: 1000px;
        }

        .section-content.collapsed {
            max-height: 0;
        }

        .selector-row {
            display: flex;
            flex-wrap: wrap;
            gap: 15px;
            margin-bottom: 15px;
        }

        .selector-container {
            flex: 1;
            min-width: 200px;
        }

        .save-config-btn {
            background-color: #007bff;
            color: white;
        }

        .save-config-btn:hover {
            background-color: #0069d9;
        }

        .save-success {
            color: #28a745;
            margin-left: 10px;
            display: none;
        }

        /* Batch import styles */
        .batch-import {
            background-color: #f8f9fa;
            padding: 15px;
            border-radius: 4px;
            margin-bottom: 20px;
            border: 1px solid #dee2e6;
        }

        .batch-import h3 {
            margin-top: 0;
            margin-bottom: 10px;
        }

        .batch-import p {
            margin-bottom: 15px;
            font-size: 0.9em;
            color: #6c757d;
        }

        /* Batch import buttons container */
        .batch-buttons-container {
            display: flex;
            gap: 10px;
            margin-top: 15px;
        }

        .clean-btn {
            width: 20%;
            background-color: #dc3545;
            color: white;
            transition: background-color 0.2s;
        }

        .clean-btn:hover {
            background-color: #bd2130;
        }

        .transform-btn {
            width: 80%;
        }

        #transformBtn {
            background-color: #6c757d;
            color: white;
        }

        #transformBtn:hover {
            background-color: #5a6268;
        }

        /* Series input style */
        .series-input {
            margin-bottom: 20px;
            padding: 15px;
            border-radius: 4px;
            background-color: #f8f9fa;
            border: 1px solid #dee2e6;
        }

        .series-input h3 {
            margin-top: 0;
            margin-bottom: 10px;
        }

        .series-input p {
            margin-bottom: 15px;
            font-size: 0.9em;
            color: #6c757d;
        }

        /* Templates section styles */
        .templates-container {
            background-color: #f8f9fa;
            padding: 15px;
            border-radius: 4px;
            margin-top: 20px;
            margin-bottom: 20px;
            border: 1px solid #dee2e6;
        }

        .templates-grid {
            display: grid;
            grid-template-columns: repeat(2, 1fr);
            gap: 15px;
            margin-top: 15px;
        }

        .template-card {
            border: 1px solid #ddd;
            border-radius: 4px;
            padding: 15px;
            background-color: white;
        }

        .template-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 10px;
        }

        .template-title {
            font-weight: bold;
            margin: 0;
        }

        .template-preview {
            font-size: 0.9em;
            color: #6c757d;
            margin-bottom: 10px;
            white-space: pre-wrap;
            overflow: hidden;
            text-overflow: ellipsis;
            max-height: 100px;
        }

        .copy-btn {
            background-color: #007bff;
            color: white;
            border: none;
            padding: 5px 10px;
            border-radius: 4px;
            cursor: pointer;
        }

        .copy-btn:hover {
            background-color: #0069d9;
        }

        .copied-message {
            display: none;
            color: #28a745;
            font-size: 0.9em;
            margin-left: 10px;
        }

        /* Script generation button styles */
        #generateScriptBtn,
        #generateCustomScriptBtn {
            width: 100%;
            margin: 10px 0;
        }

        /* Textarea copy button styles */
        .textarea-wrapper {
            position: relative;
            margin-top: 10px;
        }

        .copy-textarea-btn {
            position: absolute;
            bottom: 10px;
            right: 10px;
            background-color: #f8f9fa;
            border: 1px solid #dee2e6;
            border-radius: 4px;
            padding: 5px 8px;
            cursor: pointer;
            color: #6c757d;
            font-size: 16px;
        }

        .copy-textarea-btn:hover {
            background-color: #e9ecef;
            color: #495057;
        }

        .copy-success-message {
            position: absolute;
            bottom: 10px;
            right: 45px;
            background-color: #28a745;
            color: white;
            padding: 3px 8px;
            border-radius: 4px;
            font-size: 12px;
            display: none;
        }

        /* Video Type Button Selector */
        .video-type-selector {
            display: flex;
            justify-content: space-between;
            gap: 10px;
            margin: 20px 0;
        }

        .video-type-btn {
            flex: 1 1 auto;
            padding: 12px 10px;
            text-align: center;
            border: 2px solid #dee2e6;
            background-color: #f8f9fa;
            border-radius: 4px;
            cursor: pointer;
            transition: all 0.2s ease;
            color: #495057;
            font-weight: 500;
        }

        .video-type-btn:hover {
            border-color: #adb5bd;
            background-color: #e9ecef;
        }

        .video-type-btn.active {
            border-color: #007bff;
            background-color: #e7f1ff;
            color: #007bff;
            box-shadow: 0 0 0 0.2rem rgba(0, 123, 255, 0.25);
        }

        .video-type-btn i {
            display: block;
            font-size: 24px;
            margin-bottom: 8px;
        }

        @media (max-width: 768px) {
            .video-type-selector {
                flex-direction: column;
            }

            .video-type-btn {
                flex: 1 1 100%;
            }
        }

        /* Generate button styles */
        #generateBtn {
            font-size: 1.2rem;
            padding: 12px 30px;
            margin-bottom: 20px;
        }

        /* Script generation two-column layout */
        .script-generation-container {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 20px;
            margin-bottom: 20px;
        }

        .script-column {
            display: flex;
            flex-direction: column;
        }

        .transform-btn-full {
            width: 100%;
            margin-top: 15px;
        }

        /* Enhanced generate video button */
        .generate-video-btn {
            background: linear-gradient(to right, #2b5876, #4e4376);
            color: white;
            font-size: 1.2rem;
            padding: 12px 30px;
            margin: 20px 0;
            border-radius: 50px;
            border: none;
            box-shadow: 0 4px 10px rgba(0, 0, 0, 0.2);
            transition: all 0.3s ease;
        }

        .generate-video-btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 6px 15px rgba(0, 0, 0, 0.25);
        }

        .generate-video-btn:active {
            transform: translateY(1px);
        }

        /* Actions container */
        .actions-container {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin: 20px 0;
        }

        @media (max-width: 768px) {
            .script-generation-container {
                grid-template-columns: 1fr;
            }

            .actions-container {
                flex-direction: column;
                gap: 15px;
            }

            .btn-add {
                max-width: 100%;
            }
        }
    </style>
</head>

<body>
    <div class='container'>
        {{> languageselector}}
        <!-- Navigation menu -->
        {{> navmenu}}

        <h1>AI Video Generation</h1>

        <div class='form-container'>
            <!-- Video Type Selector (First) -->
            <div class="video-type-selector">
                <div class="video-type-btn active" data-value="basic">
                    <i class="fas fa-film"></i>
                    Basic
                </div>
                <div class="video-type-btn" data-value="real">
                    <i class="fas fa-video"></i>
                    Real
                </div>
                <div class="video-type-btn" data-value="hidden_beasts">
                    <i class="fas fa-dragon"></i>
                    Hidden Beasts
                </div>
                <div class="video-type-btn" data-value="hidden_files">
                    <i class="fas fa-folder-open"></i>
                    Hidden Files
                </div>
            </div>
            <input type="hidden" id="videoTypeSelect" value="basic">

            <!-- Script Generation section (Second - expanded by default) -->
            <div class="series-input">
                <div class="section-header" onclick="toggleSection('allScriptGeneration')">
                    <h3>Script Generation</h3>
                    <span class="toggle-icon" id="allScriptGenerationIcon">↑</span>
                </div>
                <div class="section-content" id="allScriptGenerationContent">
                    <div class="script-generation-container">
                        <!-- Left column -->
                        <div class="script-column">
                            <h4>Generate script</h4>
                            <button id="generateScriptBtn" class="btn btn-primary">Generate Script</button>
                            <div class="textarea-wrapper mt-3">
                                <textarea id="scriptOutput" class="form-control" rows="15"></textarea>
                                <button class="copy-textarea-btn"
                                    onclick="copyToClipboard('scriptOutput')">Copy</button>
                                <span class="copy-success-message">Copied!</span>
                            </div>
                        </div>

                        <!-- Right column -->
                        <div class="script-column">
                            <h4>Generate JSON from script</h4>
                            <textarea id="customScriptInput" class="form-control" rows="4"
                                placeholder="Enter your custom story idea or topic here..."></textarea>
                            <button id="generateCustomScriptBtn" class="btn btn-primary mt-3">Generate Custom
                                Script</button>
                            <div class="textarea-wrapper mt-3">
                                <textarea id="customScriptOutput" class="form-control" rows="10"></textarea>
                                <button class="copy-textarea-btn"
                                    onclick="copyToClipboard('customScriptOutput')">Copy</button>
                                <span class="copy-success-message">Copied!</span>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Batch import section (Third) -->
            <div class="batch-import">
                <h3>Batch Import</h3>
                <p>Paste a JSON array with "text" and "image" properties to create multiple entries at once.</p>
                <textarea id="batchImportText" class="form-control"
                    placeholder='[{"text": "First text prompt", "image": "First image prompt"}, {"text": "Second text prompt", "image": "Second image prompt"}]'
                    rows="4"></textarea>
                <div class="batch-buttons-container">
                    <button id="cleanBtn" class="btn clean-btn" onclick="clearPrompts()">Limpiar</button>
                    <button id="transformBtn" class="btn transform-btn">Transform JSON to Entries</button>
                </div>
            </div>

            <!-- Prompt entries section (Fourth) -->
            <p>Enter text and image prompts to generate video content. Each pair will be used to create a segment in the
                final video.</p>
            <div class='text-entries' id='promptEntries'>
                <div class='prompt-entry'>
                    <button class='remove-btn' onclick='removePromptEntry(this)'>×</button>
                    <div class='prompt-pair'>
                        <div class='prompt-box'>
                            <div class='form-group'>
                                <label>Text Prompt:</label>
                                <textarea class='text-input'
                                    placeholder='Enter text to generate a video segment...'></textarea>
                            </div>
                        </div>
                        <div class='prompt-box'>
                            <div class='form-group'>
                                <label>Image Prompt:</label>
                                <textarea class='image-input'
                                    placeholder='Enter image description for this segment...'></textarea>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Action buttons (Fifth) -->
            <div class="actions-container">
                <button class='btn btn-add' onclick='addPromptEntry()'>Add Another Prompt</button>
                <button id='generateBtn' class='btn generate-video-btn' onclick='generateVideo()'>Generate
                    Video</button>
            </div>

            <!-- Result containers (Sixth) -->
            <div id='loadingIndicator' class='loading'>
                Generating your video... This may take several minutes. Please wait.
            </div>

            <div id='resultContainer' class='result-container'>
                <h3>Success!</h3>
                <p>Your video generation task has been created successfully. The video will be processed in the
                    background.
                </p>
                <p>You can check the home page later to see your generated video.</p>
            </div>

            <div id='errorContainer' class='error-container'>
                <h3>Error</h3>
                <p id='errorMessage'></p>
            </div>

            <!-- Video Settings section (Last) -->
            <div class="series-input">
                <div class="section-header" onclick="toggleSection('videoSettings')">
                    <h3>Video Settings</h3>
                    <span class="toggle-icon collapsed" id="videoSettingsIcon">↑</span>
                </div>
                <div class="section-content collapsed" id="videoSettingsContent">
                    <div class="form-group mb-3">
                        <label>Series Name (Optional)</label>
                        <p class="small text-muted">Add a series name to group related videos together. You can filter
                            by series in the video list.</p>
                        <input type="text" id="seriesInput" class="form-control"
                            placeholder="Enter series name (optional)">
                    </div>
                </div>
            </div>
        </div>
    </div>

    <script>
        let allVoices = [];
        let currentConfig = null;

        document.addEventListener('DOMContentLoaded', async () => {
            try {
                // Load templates if the element exists
                if (document.getElementById('templatesGrid')) {
                    loadTemplates();
                }

                // Initialize video type button selector
                initVideoTypeButtons();
            } catch (error) {
                console.warn('No existing configuration found:', error);
            }
        });

        function toggleSection(sectionId) {
            const content = document.getElementById(`${sectionId}Content`);
            const icon = document.getElementById(`${sectionId}Icon`);

            content.classList.toggle('collapsed');
            icon.classList.toggle('collapsed');
        }

        // Add safe event listener that checks if element exists first
        function addSafeEventListener(elementId, event, callback) {
            const element = document.getElementById(elementId);
            if (element) {
                element.addEventListener(event, callback);
            }
        }

        // Replace direct event listeners with safe versions
        addSafeEventListener('languageSelect', 'change', function () {
            const selectedLanguage = this.value;
            updateVoiceOptions(selectedLanguage);
        });

        addSafeEventListener('voiceSelect', 'change', function () {
            updateSaveButtonState();
        });

        addSafeEventListener('saveConfigBtn', 'click', async function () {
            const languageSelect = document.getElementById('languageSelect');
            const voiceSelect = document.getElementById('voiceSelect');
            const lang = localStorage.getItem('lang') || 'en';
            if (!languageSelect || !voiceSelect) return;

            const languageCode = languageSelect.value;
            const voiceId = voiceSelect.value;
            if (!languageCode || !voiceId) return;

            try {
                const response = await fetch('/polly-config', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        languageCode,
                        voiceId,
                        lang
                    })
                });

                if (response.ok) {
                    currentConfig = await response.json();
                    const saveSuccess = document.getElementById('saveSuccess');
                    saveSuccess.style.display = 'inline';
                    setTimeout(() => {
                        saveSuccess.style.display = 'none';
                    }, 3000);
                } else {
                    throw new Error('Failed to save configuration');
                }
            } catch (error) {
                console.error('Error saving configuration:', error);
                alert('Failed to save voice configuration. Please try again.');
            }
        });

        function updateVoiceOptions(language, selectedVoice = null) {
            const voiceSelect = document.getElementById('voiceSelect');
            if (!voiceSelect) return;

            if (!language) {
                voiceSelect.disabled = true;
                while (voiceSelect.options.length > 1) {
                    voiceSelect.remove(1);
                }
                return;
            }

            const filteredVoices = allVoices.filter(voice => voice.language === language);
            while (voiceSelect.options.length > 1) {
                voiceSelect.remove(1);
            }

            filteredVoices.forEach(voice => {
                const option = document.createElement('option');
                option.value = voice.name;
                option.textContent = voice.name;
                voiceSelect.appendChild(option);
            });

            voiceSelect.disabled = false;

            if (selectedVoice && filteredVoices.some(voice => voice.name === selectedVoice)) {
                voiceSelect.value = selectedVoice;
            }
        }

        function updateSaveButtonState() {
            const languageSelect = document.getElementById('languageSelect');
            const voiceSelect = document.getElementById('voiceSelect');
            const saveButton = document.getElementById('saveConfigBtn');

            if (!languageSelect || !voiceSelect || !saveButton) return;

            saveButton.disabled = !languageSelect.value || !voiceSelect.value;
        }

        async function generateVideo() {
            const textInputs = document.querySelectorAll('.text-input');
            const imageInputs = document.querySelectorAll('.image-input');
            const texts = Array.from(textInputs)
                .map(input => input.value.trim())
                .filter(text => text);
            const images = Array.from(imageInputs)
                .map(input => input.value.trim())
                .filter(image => image);
            const series = document.getElementById('seriesInput').value.trim();
            const type = document.getElementById('videoTypeSelect').value;

            if (texts.length === 0) {
                alert('Please enter at least one text prompt.');
                return;
            }

            document.getElementById('loadingIndicator').style.display = 'block';
            document.getElementById('resultContainer').style.display = 'none';
            document.getElementById('errorContainer').style.display = 'none';
            document.getElementById('generateBtn').disabled = true;

            try {
                const lang = localStorage.getItem('lang') || 'en';
                const response = await fetch('/videos/create-video-job', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        texts,
                        images,
                        series,
                        type,
                        lang,
                    })
                });

                if (response.ok) {
                    const result = await response.json();
                    document.getElementById('resultContainer').style.display = 'block';
                } else {
                    throw new Error('Failed to generate video');
                }
            } catch (error) {
                document.getElementById('errorMessage').textContent = `Error: ${error.message}`;
                document.getElementById('errorContainer').style.display = 'block';
                console.error('Error generating video:', error);
            } finally {
                document.getElementById('loadingIndicator').style.display = 'none';
                document.getElementById('generateBtn').disabled = false;
            }
        }

        function addPromptEntry() {
            const promptEntries = document.getElementById('promptEntries');
            const newEntry = document.createElement('div');
            newEntry.className = 'prompt-entry';
            newEntry.innerHTML = `
                <button class="remove-btn" onclick="removePromptEntry(this)">×</button>
                <div class='prompt-pair'>
                    <div class='prompt-box'>
                        <div class="form-group">
                            <label>Text Prompt:</label>
                            <textarea class="text-input" placeholder="Enter text to generate a video segment..."></textarea>
                        </div>
                    </div>
                    <div class='prompt-box'>
                        <div class="form-group">
                            <label>Image Prompt:</label>
                            <textarea class="image-input" placeholder="Enter image description for this segment..."></textarea>
                        </div>
                    </div>
                </div>
            `;
            promptEntries.appendChild(newEntry);
        }

        function removePromptEntry(button) {
            const entries = document.querySelectorAll('.prompt-entry');
            if (entries.length > 1) {
                const entry = button.parentElement;
                entry.remove();
            } else {
                alert('You need at least one prompt pair.');
            }
        }

        function clearPrompts() {
            const promptEntries = document.getElementById('promptEntries');
            promptEntries.innerHTML = `
                <div class='prompt-entry'>
                    <button class='remove-btn' onclick='removePromptEntry(this)'>×</button>
                    <div class='prompt-pair'>
                        <div class='prompt-box'>
                            <div class='form-group'>
                                <label>Text Prompt:</label>
                                <textarea class='text-input'
                                    placeholder='Enter text to generate a video segment...'></textarea>
                            </div>
                        </div>
                        <div class='prompt-box'>
                            <div class='form-group'>
                                <label>Image Prompt:</label>
                                <textarea class='image-input'
                                    placeholder='Enter image description for this segment...'></textarea>
                            </div>
                        </div>
                    </div>
                </div>
            `;
        }

        addSafeEventListener('transformBtn', 'click', function () {
            let batchImportText = document.getElementById('batchImportText').value.trim();
            if (!batchImportText) {
                alert('Please paste a JSON array.');
                return;
            }

            // Extract content between square brackets
            const bracketMatch = batchImportText.match(/\[.*\]/s);
            if (bracketMatch) {
                batchImportText = bracketMatch[0];
            }

            try {
                const parsedData = JSON.parse(batchImportText);
                if (!Array.isArray(parsedData)) {
                    throw new Error('Invalid JSON format. Expected an array.');
                }

                parsedData.forEach(item => {
                    if (item.text && item.image) {
                        const promptEntries = document.getElementById('promptEntries');
                        const newEntry = document.createElement('div');
                        newEntry.className = 'prompt-entry';
                        newEntry.innerHTML = `
                            <button class="remove-btn" onclick="removePromptEntry(this)">×</button>
                            <div class='prompt-pair'>
                                <div class='prompt-box'>
                                    <div class="form-group">
                                        <label>Text Prompt:</label>
                                        <textarea class="text-input">${item.text}</textarea>
                                    </div>
                                </div>
                                <div class='prompt-box'>
                                    <div class="form-group">
                                        <label>Image Prompt:</label>
                                        <textarea class="image-input">${item.image}</textarea>
                                    </div>
                                </div>
                            </div>
                        `;
                        promptEntries.appendChild(newEntry);
                    } else {
                        console.warn('Skipping invalid item:', item);
                    }
                });
            } catch (error) {
                alert(`Error parsing JSON: ${error.message}`);
                console.error('Error parsing batch import JSON:', error);
            }
        });

        // Add script generation functionality
        addSafeEventListener('generateScriptBtn', 'click', async function () {
            try {
                const type = document.getElementById('videoTypeSelect').value;
                const lang = localStorage.getItem('lang') || 'en';
                document.getElementById('scriptOutput').value = 'Generating script...';
                document.getElementById('generateScriptBtn').disabled = true;

                const response = await fetch('/video-generation/generate-script', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ type, lang })
                });

                if (!response.ok) {
                    throw new Error(`Failed to generate script: ${response.statusText}`);
                }

                const result = await response.json();
                document.getElementById('scriptOutput').value = result.data.script;
            } catch (error) {
                console.error('Error generating script:', error);
                document.getElementById('scriptOutput').value = `Error: ${error.message}`;
            } finally {
                document.getElementById('generateScriptBtn').disabled = false;
            }
        });

        // Add custom script generation functionality
        addSafeEventListener('generateCustomScriptBtn', 'click', async function () {
            try {
                const type = document.getElementById('videoTypeSelect').value;
                const lang = localStorage.getItem('lang') || 'en';
                const customText = document.getElementById('customScriptInput').value.trim();
                if (!customText) {
                    alert('Please enter a custom story idea or topic.');
                    return;
                }

                document.getElementById('customScriptOutput').value = 'Generating custom script...';
                document.getElementById('generateCustomScriptBtn').disabled = true;

                const response = await fetch('/video-generation/generate-script-json', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ type, text: customText, lang })
                });

                if (!response.ok) {
                    throw new Error(`Failed to generate custom script: ${response.statusText}`);
                }

                const result = await response.json();
                document.getElementById('customScriptOutput').value = result.data.script;
            } catch (error) {
                console.error('Error generating custom script:', error);
                document.getElementById('customScriptOutput').value = `Error: ${error.message}`;
            } finally {
                document.getElementById('generateCustomScriptBtn').disabled = false;
            }
        });

        async function loadTemplates() {
            try {
                const response = await fetch('/templates');
                if (!response.ok) throw new Error('Failed to fetch templates');

                const templates = await response.json();
                const templatesGrid = document.getElementById('templatesGrid');

                // Check if templatesGrid element exists
                if (!templatesGrid) {
                    console.warn('Templates grid element not found in the DOM');
                    return;
                }

                templatesGrid.innerHTML = '';

                if (Object.keys(templates).length === 0) {
                    templatesGrid.innerHTML = '<p>No templates found.</p>';
                    return;
                }

                // Loop through the template object
                Object.entries(templates).forEach(([key, content]) => {
                    const templateCard = document.createElement('div');
                    templateCard.className = 'template-card';

                    // Format the key for display (replace underscores with spaces)
                    const displayName = key.replace(/_/g, ' ');

                    templateCard.innerHTML = `
                        <div class="template-header">
                            <h4 class="template-title">${displayName}</h4>
                            <button class="copy-btn" onclick="copyTemplateContent('${key}', this)">Copy</button>
                        </div>
                        <div class="template-preview">${String(content).substring(0, 100)}...</div>
                        <span class="copied-message">Copied to clipboard!</span>
                    `;
                    templatesGrid.appendChild(templateCard);
                });
            } catch (error) {
                console.error('Error loading templates:', error);
                const templatesGrid = document.getElementById('templatesGrid');
                if (templatesGrid) {
                    templatesGrid.innerHTML = '<p>Error loading templates. Please try again later.</p>';
                }
            }
        }

        async function copyTemplateContent(templateKey, button) {
            try {
                const response = await fetch('/templates');
                if (!response.ok) throw new Error('Failed to fetch templates');

                const templates = await response.json();
                const content = templates[templateKey];

                if (!content) throw new Error('Template content not found');

                await navigator.clipboard.writeText(String(content));

                // Show copied message
                const copiedMessage = button.parentElement.parentElement.querySelector('.copied-message');
                copiedMessage.style.display = 'inline';
                setTimeout(() => {
                    copiedMessage.style.display = 'none';
                }, 2000);
            } catch (error) {
                console.error('Error copying template:', error);
                alert('Failed to copy template. Please try again.');
            }
        }

        function copyToClipboard(textareaId) {
            const textarea = document.getElementById(textareaId);
            const successMessage = textarea.nextElementSibling;

            textarea.select();
            document.execCommand('copy');

            successMessage.style.display = 'inline';
            setTimeout(() => {
                successMessage.style.display = 'none';
            }, 2000);
        }

        function initVideoTypeButtons() {
            const buttons = document.querySelectorAll('.video-type-btn');
            const hiddenInput = document.getElementById('videoTypeSelect');

            buttons.forEach(button => {
                button.addEventListener('click', function () {
                    // Remove active class from all buttons
                    buttons.forEach(btn => btn.classList.remove('active'));

                    // Add active class to the clicked button
                    this.classList.add('active');

                    // Update the hidden input value
                    hiddenInput.value = this.dataset.value;
                });
            });
        }
    </script>
</body>

</html>