<html lang='en'>

<head>
    {{> head}}
    <style>
        .form-container {
            margin-bottom: 20px;
        }

        .text-entries {
            margin-bottom: 20px;
        }

        .prompt-entry {
            position: relative;
            padding: 15px;
            background-color: #f9f9f9;
            border: 1px solid #ddd;
            border-radius: 4px;
            margin-bottom: 15px;
        }

        .prompt-pair {
            display: flex;
            gap: 15px;
        }

        .prompt-box {
            flex: 1;
        }

        .remove-btn {
            position: absolute;
            top: 5px;
            right: 5px;
            background-color: #dc3545;
            color: white;
            border: none;
            border-radius: 50%;
            width: 25px;
            height: 25px;
            display: flex;
            align-items: center;
            justify-content: center;
            cursor: pointer;
        }

        .form-group {
            margin-bottom: 15px;
        }

        label {
            display: block;
            margin-bottom: 5px;
            font-weight: bold;
        }

        textarea {
            width: 100%;
            padding: 10px;
            border: 1px solid #ddd;
            border-radius: 4px;
            resize: vertical;
            min-height: 80px;
            font-family: inherit;
        }

        .btn-add {
            background-color: #28a745;
            color: white;
            max-width: 200px;
            margin: 0 auto;
            display: block;
        }

        .btn-add:hover {
            background-color: #218838;
        }

        .submit-container {
            text-align: center;
            margin-top: 20px;
        }

        .loading {
            display: none;
            text-align: center;
            padding: 20px;
            font-style: italic;
            color: #666;
        }

        .result-container {
            display: none;
            margin-top: 20px;
            padding: 15px;
            background-color: #d4edda;
            border: 1px solid #c3e6cb;
            border-radius: 4px;
            color: #155724;
        }

        .error-container {
            display: none;
            margin-top: 20px;
            padding: 15px;
            background-color: #f8d7da;
            border: 1px solid #f5c6cb;
            border-radius: 4px;
            color: #721c24;
        }

        /* Voice settings styles */
        .voice-settings {
            background-color: #f8f9fa;
            padding: 15px;
            border-radius: 4px;
            margin-bottom: 20px;
            border: 1px solid #dee2e6;
        }

        /* Collapsible section styles */
        .section-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            cursor: pointer;
            margin-bottom: 10px;
        }

        .section-header h3 {
            margin: 0;
        }

        .toggle-icon {
            font-size: 1.2em;
            transition: transform 0.3s ease;
        }

        .toggle-icon.collapsed {
            transform: rotate(180deg);
        }

        .section-content {
            overflow: hidden;
            transition: max-height 0.3s ease;
            max-height: 1000px;
        }

        .section-content.collapsed {
            max-height: 0;
        }

        .selector-row {
            display: flex;
            flex-wrap: wrap;
            gap: 15px;
            margin-bottom: 15px;
        }

        .selector-container {
            flex: 1;
            min-width: 200px;
        }

        .save-config-btn {
            background-color: #007bff;
            color: white;
        }

        .save-config-btn:hover {
            background-color: #0069d9;
        }

        .save-success {
            color: #28a745;
            margin-left: 10px;
            display: none;
        }

        /* Batch import styles */
        .batch-import {
            background-color: #f8f9fa;
            padding: 15px;
            border-radius: 4px;
            margin-bottom: 20px;
            border: 1px solid #dee2e6;
        }

        .batch-import h3 {
            margin-top: 0;
            margin-bottom: 10px;
        }

        .batch-import p {
            margin-bottom: 15px;
            font-size: 0.9em;
            color: #6c757d;
        }

        #transformBtn {
            background-color: #6c757d;
            color: white;
        }

        #transformBtn:hover {
            background-color: #5a6268;
        }

        /* Series input style */
        .series-input {
            margin-bottom: 20px;
            padding: 15px;
            border-radius: 4px;
            background-color: #f8f9fa;
            border: 1px solid #dee2e6;
        }

        .series-input h3 {
            margin-top: 0;
            margin-bottom: 10px;
        }

        .series-input p {
            margin-bottom: 15px;
            font-size: 0.9em;
            color: #6c757d;
        }

        /* Templates section styles */
        .templates-container {
            background-color: #f8f9fa;
            padding: 15px;
            border-radius: 4px;
            margin-top: 20px;
            margin-bottom: 20px;
            border: 1px solid #dee2e6;
        }

        .templates-grid {
            display: grid;
            grid-template-columns: repeat(2, 1fr);
            gap: 15px;
            margin-top: 15px;
        }

        .template-card {
            border: 1px solid #ddd;
            border-radius: 4px;
            padding: 15px;
            background-color: white;
        }

        .template-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 10px;
        }

        .template-title {
            font-weight: bold;
            margin: 0;
        }

        .template-preview {
            font-size: 0.9em;
            color: #6c757d;
            margin-bottom: 10px;
            white-space: pre-wrap;
            overflow: hidden;
            text-overflow: ellipsis;
            max-height: 100px;
        }

        .copy-btn {
            background-color: #007bff;
            color: white;
            border: none;
            padding: 5px 10px;
            border-radius: 4px;
            cursor: pointer;
        }

        .copy-btn:hover {
            background-color: #0069d9;
        }

        .copied-message {
            display: none;
            color: #28a745;
            font-size: 0.9em;
            margin-left: 10px;
        }
    </style>
</head>

<body>
    <div class='container'>
        <!-- Navigation menu -->
        {{> navmenu}}

        <h1>AI Video Generation</h1>

        <div class='form-container'>
            <!-- Voice and language selectors -->
            <div class="voice-settings">
                <div class="section-header" onclick="toggleSection('voiceSettings')">
                    <h3>Voice Settings</h3>
                    <span class="toggle-icon collapsed" id="voiceSettingsIcon">↑</span>
                </div>
                <div class="section-content collapsed" id="voiceSettingsContent">
                    <div class="selector-row">
                        <div class="selector-container">
                            <label for="languageSelect">Language:</label>
                            <select id="languageSelect" class="form-control">
                                <option value="">Select a language</option>
                            </select>
                        </div>
                        <div class="selector-container">
                            <label for="voiceSelect">Voice:</label>
                            <select id="voiceSelect" class="form-control" disabled>
                                <option value="">Select a voice</option>
                            </select>
                        </div>
                    </div>
                    <button id="saveConfigBtn" class="btn save-config-btn" disabled>Save Configuration</button>
                    <span id="saveSuccess" class="save-success">✓ Configuration saved!</span>
                </div>
            </div>

            <!-- Series input section -->
            <div class="series-input">
                <div class="section-header" onclick="toggleSection('seriesInput')">
                    <h3>Series (Optional)</h3>
                    <span class="toggle-icon collapsed" id="seriesInputIcon">↑</span>
                </div>
                <div class="section-content collapsed" id="seriesInputContent">
                    <p>Add a series name to group related videos together. You can filter by series in the video list.
                    </p>
                    <input type="text" id="seriesInput" class="form-control" placeholder="Enter series name (optional)">
                </div>
            </div>

            <!-- Video type selection -->
            <div class="series-input">
                <div class="section-header" onclick="toggleSection('videoType')">
                    <h3>Video Type</h3>
                    <span class="toggle-icon collapsed" id="videoTypeIcon">↑</span>
                </div>
                <div class="section-content collapsed" id="videoTypeContent">
                    <p>Select the type of video you want to create.</p>
                    <select id="videoTypeSelect" class="form-control">
                        <option value="basic" selected>Basic</option>
                        <option value="structured">Structured</option>
                        <option value="real">Real</option>
                    </select>
                </div>
            </div>

            <!-- Batch import section -->
            <div class="batch-import">
                <h3>Batch Import</h3>
                <p>Paste a JSON array with "text" and "image" properties to create multiple entries at once.</p>
                <textarea id="batchImportText" class="form-control"
                    placeholder='[{"text": "First text prompt", "image": "First image prompt"}, {"text": "Second text prompt", "image": "Second image prompt"}]'
                    rows="4"></textarea>
                <button id="transformBtn" class="btn mt-2">Transform JSON to Entries</button>
            </div>

            <!-- Prompt entries section -->
            <p>Enter text and image prompts to generate video content. Each pair will be used to create a segment in the
                final video.</p>
            <div class='text-entries' id='promptEntries'>
                <div class='prompt-entry'>
                    <button class='remove-btn' onclick='removePromptEntry(this)'>×</button>
                    <div class='prompt-pair'>
                        <div class='prompt-box'>
                            <div class='form-group'>
                                <label>Text Prompt:</label>
                                <textarea class='text-input'
                                    placeholder='Enter text to generate a video segment...'></textarea>
                            </div>
                        </div>
                        <div class='prompt-box'>
                            <div class='form-group'>
                                <label>Image Prompt:</label>
                                <textarea class='image-input'
                                    placeholder='Enter image description for this segment...'></textarea>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <button class='btn btn-add' onclick='addPromptEntry()'>Add Another Prompt</button>

            <div class='submit-container'>
                <button id='generateBtn' class='btn btn-primary' onclick='generateVideo()'>Generate Video</button>
            </div>
        </div>

        <div id='loadingIndicator' class='loading'>
            Generating your video... This may take several minutes. Please wait.
        </div>

        <div id='resultContainer' class='result-container'>
            <h3>Success!</h3>
            <p>Your video generation task has been created successfully. The video will be processed in the background.
            </p>
            <p>You can check the home page later to see your generated video.</p>
        </div>

        <div id='errorContainer' class='error-container'>
            <h3>Error</h3>
            <p id='errorMessage'></p>
        </div>

        <!-- Templates section -->
        <div class="templates-container">
            <div class="section-header" onclick="toggleSection('templates')">
                <h3>Prompt Templates</h3>
                <span class="toggle-icon collapsed" id="templatesIcon">↑</span>
            </div>
            <div class="section-content collapsed" id="templatesContent">
                <p>Select a template to use as a starting point for your prompts. Click to copy to clipboard.</p>
                <div class="templates-grid" id="templatesGrid">
                    <!-- Templates will be loaded here -->
                    <div class="loading-templates">Loading templates...</div>
                </div>
            </div>
        </div>
    </div>

    <script>
        let allVoices = [];
        let currentConfig = null;

        document.addEventListener('DOMContentLoaded', async () => {
            try {
                const voicesResponse = await fetch('/polly-config/voices');
                if (!voicesResponse.ok) throw new Error('Failed to fetch voices');
                allVoices = await voicesResponse.json();

                const languages = [...new Set(allVoices.map(voice => voice.language))].sort();
                const languageSelect = document.getElementById('languageSelect');
                languages.forEach(language => {
                    const option = document.createElement('option');
                    option.value = language;
                    option.textContent = language;
                    languageSelect.appendChild(option);
                });

                const configResponse = await fetch('/polly-config');
                if (configResponse.ok) {
                    currentConfig = await configResponse.json();
                    if (currentConfig.languageCode) {
                        languageSelect.value = currentConfig.languageCode;
                        updateVoiceOptions(currentConfig.languageCode, currentConfig.voiceId);
                    }
                }

                // Load templates
                loadTemplates();
            } catch (error) {
                console.warn('No existing configuration found:', error);
            }
        });

        function toggleSection(sectionId) {
            const content = document.getElementById(`${sectionId}Content`);
            const icon = document.getElementById(`${sectionId}Icon`);

            content.classList.toggle('collapsed');
            icon.classList.toggle('collapsed');
        }

        document.getElementById('languageSelect').addEventListener('change', function () {
            const selectedLanguage = this.value;
            updateVoiceOptions(selectedLanguage);
        });

        document.getElementById('voiceSelect').addEventListener('change', function () {
            updateSaveButtonState();
        });

        document.getElementById('saveConfigBtn').addEventListener('click', async function () {
            const languageCode = document.getElementById('languageSelect').value;
            const voiceId = document.getElementById('voiceSelect').value;
            if (!languageCode || !voiceId) return;

            try {
                const response = await fetch('/polly-config', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        languageCode,
                        voiceId
                    })
                });

                if (response.ok) {
                    currentConfig = await response.json();
                    const saveSuccess = document.getElementById('saveSuccess');
                    saveSuccess.style.display = 'inline';
                    setTimeout(() => {
                        saveSuccess.style.display = 'none';
                    }, 3000);
                } else {
                    throw new Error('Failed to save configuration');
                }
            } catch (error) {
                console.error('Error saving configuration:', error);
                alert('Failed to save voice configuration. Please try again.');
            }
        });

        function updateVoiceOptions(language, selectedVoice = null) {
            const voiceSelect = document.getElementById('voiceSelect');
            if (!language) {
                voiceSelect.disabled = true;
                while (voiceSelect.options.length > 1) {
                    voiceSelect.remove(1);
                }
                return;
            }

            const filteredVoices = allVoices.filter(voice => voice.language === language);
            while (voiceSelect.options.length > 1) {
                voiceSelect.remove(1);
            }

            filteredVoices.forEach(voice => {
                const option = document.createElement('option');
                option.value = voice.name;
                option.textContent = voice.name;
                voiceSelect.appendChild(option);
            });

            voiceSelect.disabled = false;

            if (selectedVoice && filteredVoices.some(voice => voice.name === selectedVoice)) {
                voiceSelect.value = selectedVoice;
            }
        }

        function updateSaveButtonState() {
            const languageSelect = document.getElementById('languageSelect');
            const voiceSelect = document.getElementById('voiceSelect');
            const saveButton = document.getElementById('saveConfigBtn');

            saveButton.disabled = !languageSelect.value || !voiceSelect.value;
        }

        async function generateVideo() {
            const textInputs = document.querySelectorAll('.text-input');
            const imageInputs = document.querySelectorAll('.image-input');
            const texts = Array.from(textInputs)
                .map(input => input.value.trim())
                .filter(text => text);
            const images = Array.from(imageInputs)
                .map(input => input.value.trim())
                .filter(image => image);
            const series = document.getElementById('seriesInput').value.trim();
            const type = document.getElementById('videoTypeSelect').value;

            if (texts.length === 0) {
                alert('Please enter at least one text prompt.');
                return;
            }

            document.getElementById('loadingIndicator').style.display = 'block';
            document.getElementById('resultContainer').style.display = 'none';
            document.getElementById('errorContainer').style.display = 'none';
            document.getElementById('generateBtn').disabled = true;

            const voiceId = document.getElementById('voiceSelect').value || "Joanna";
            const languageCode = document.getElementById('languageSelect').value || "en-US";

            try {
                const response = await fetch('/videos/create-video-job', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        languageCode,
                        texts,
                        images,
                        series,
                        type,
                        options: {
                            voiceId,
                            outputFormat: "mp3",
                            languageCode,
                            engine: "standard"
                        }
                    })
                });

                if (response.ok) {
                    const result = await response.json();
                    document.getElementById('resultContainer').style.display = 'block';
                } else {
                    throw new Error('Failed to generate video');
                }
            } catch (error) {
                document.getElementById('errorMessage').textContent = `Error: ${error.message}`;
                document.getElementById('errorContainer').style.display = 'block';
                console.error('Error generating video:', error);
            } finally {
                document.getElementById('loadingIndicator').style.display = 'none';
                document.getElementById('generateBtn').disabled = false;
            }
        }

        function addPromptEntry() {
            const promptEntries = document.getElementById('promptEntries');
            const newEntry = document.createElement('div');
            newEntry.className = 'prompt-entry';
            newEntry.innerHTML = `
                <button class="remove-btn" onclick="removePromptEntry(this)">×</button>
                <div class='prompt-pair'>
                    <div class='prompt-box'>
                        <div class="form-group">
                            <label>Text Prompt:</label>
                            <textarea class="text-input" placeholder="Enter text to generate a video segment..."></textarea>
                        </div>
                    </div>
                    <div class='prompt-box'>
                        <div class="form-group">
                            <label>Image Prompt:</label>
                            <textarea class="image-input" placeholder="Enter image description for this segment..."></textarea>
                        </div>
                    </div>
                </div>
            `;
            promptEntries.appendChild(newEntry);
        }

        function removePromptEntry(button) {
            const entries = document.querySelectorAll('.prompt-entry');
            if (entries.length > 1) {
                const entry = button.parentElement;
                entry.remove();
            } else {
                alert('You need at least one prompt pair.');
            }
        }

        document.getElementById('transformBtn').addEventListener('click', function () {
            const batchImportText = document.getElementById('batchImportText').value.trim();
            if (!batchImportText) {
                alert('Please paste a JSON array.');
                return;
            }

            try {
                const parsedData = JSON.parse(batchImportText);
                if (!Array.isArray(parsedData)) {
                    throw new Error('Invalid JSON format. Expected an array.');
                }

                parsedData.forEach(item => {
                    if (item.text && item.image) {
                        const promptEntries = document.getElementById('promptEntries');
                        const newEntry = document.createElement('div');
                        newEntry.className = 'prompt-entry';
                        newEntry.innerHTML = `
                            <button class="remove-btn" onclick="removePromptEntry(this)">×</button>
                            <div class='prompt-pair'>
                                <div class='prompt-box'>
                                    <div class="form-group">
                                        <label>Text Prompt:</label>
                                        <textarea class="text-input">${item.text}</textarea>
                                    </div>
                                </div>
                                <div class='prompt-box'>
                                    <div class="form-group">
                                        <label>Image Prompt:</label>
                                        <textarea class="image-input">${item.image}</textarea>
                                    </div>
                                </div>
                            </div>
                        `;
                        promptEntries.appendChild(newEntry);
                    } else {
                        console.warn('Skipping invalid item:', item);
                    }
                });
            } catch (error) {
                alert(`Error parsing JSON: ${error.message}`);
                console.error('Error parsing batch import JSON:', error);
            }
        });

        async function loadTemplates() {
            try {
                const response = await fetch('/templates');
                if (!response.ok) throw new Error('Failed to fetch templates');

                const templates = await response.json();
                const templatesGrid = document.getElementById('templatesGrid');
                templatesGrid.innerHTML = '';

                if (Object.keys(templates).length === 0) {
                    templatesGrid.innerHTML = '<p>No templates found.</p>';
                    return;
                }

                // Loop through the template object
                Object.entries(templates).forEach(([key, content]) => {
                    const templateCard = document.createElement('div');
                    templateCard.className = 'template-card';

                    // Format the key for display (replace underscores with spaces)
                    const displayName = key.replace(/_/g, ' ');

                    templateCard.innerHTML = `
                        <div class="template-header">
                            <h4 class="template-title">${displayName}</h4>
                            <button class="copy-btn" onclick="copyTemplateContent('${key}', this)">Copy</button>
                        </div>
                        <div class="template-preview">${String(content).substring(0, 100)}...</div>
                        <span class="copied-message">Copied to clipboard!</span>
                    `;
                    templatesGrid.appendChild(templateCard);
                });
            } catch (error) {
                console.error('Error loading templates:', error);
                document.getElementById('templatesGrid').innerHTML =
                    '<p>Error loading templates. Please try again later.</p>';
            }
        }

        async function copyTemplateContent(templateKey, button) {
            try {
                const response = await fetch('/templates');
                if (!response.ok) throw new Error('Failed to fetch templates');

                const templates = await response.json();
                const content = templates[templateKey];

                if (!content) throw new Error('Template content not found');

                await navigator.clipboard.writeText(String(content));

                // Show copied message
                const copiedMessage = button.parentElement.parentElement.querySelector('.copied-message');
                copiedMessage.style.display = 'inline';
                setTimeout(() => {
                    copiedMessage.style.display = 'none';
                }, 2000);
            } catch (error) {
                console.error('Error copying template:', error);
                alert('Failed to copy template. Please try again.');
            }
        }
    </script>
</body>

</html>