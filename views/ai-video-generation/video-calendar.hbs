<html lang='en'>

<head>
    {{> head}}
    <style>
        .calendar-container {
            margin-top: 20px;
            border: 1px solid #ddd;
            border-radius: 8px;
            overflow: hidden;
            background-color: white;
        }

        .calendar-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 15px;
            background-color: #f8f9fa;
            border-bottom: 1px solid #ddd;
        }

        .calendar-navigation {
            display: flex;
            align-items: center;
            width: 100%;
            justify-content: space-between;
        }

        .month-display {
            font-size: 1.5rem;
            font-weight: bold;
            text-align: center;
            margin: 0;
        }

        .calendar-navigation button {
            background-color: #007bff;
            color: white;
            border: none;
            padding: 8px 16px;
            border-radius: 4px;
            cursor: pointer;
            transition: background-color 0.3s;
        }

        .calendar-navigation button:hover {
            background-color: #0056b3;
        }

        .calendar-grid {
            display: grid;
            grid-template-columns: repeat(7, 1fr);
            border-bottom: 1px solid #ddd;
        }

        .calendar-day-header {
            text-align: center;
            padding: 10px;
            font-weight: bold;
            border-right: 1px solid #ddd;
            background-color: #f8f9fa;
        }

        .calendar-day {
            min-height: 100px;
            border-right: 1px solid #ddd;
            border-bottom: 1px solid #ddd;
            padding: 10px;
            position: relative;
        }

        .calendar-day:nth-child(7n) {
            border-right: none;
        }

        .day-number {
            position: absolute;
            top: 5px;
            right: 8px;
            color: #333;
            font-size: 1.2em;
            font-weight: bold;
            background-color: rgba(245, 245, 245, 0.5);
            padding: 2px 6px;
            border-radius: 4px;
        }

        .other-month .day-number,
        .other-month .video-item {
            display: none;
        }

        .today {
            border: 3px solid #2c3e50 !important;
            box-shadow: inset 0 0 5px rgba(44, 62, 80, 0.3);
        }

        .video-item {
            margin-top: 30px;
            /* Increased to make room for larger day number */
            padding: 5px;
            font-size: 0.85em;
            background-color: #e9f5ff;
            border-radius: 4px;
            overflow: hidden;
            text-overflow: ellipsis;
            white-space: nowrap;
            cursor: pointer;
            transition: background-color 0.3s;
        }

        .pending-upload {
            background-color: yellow;
        }

        .other-month {
            background-color: #f8f9fa;
            color: #aaa;
        }

        .past-day {
            background-color: #f5f5f5;
            /* Subtle light gray for past days */
        }

        .future-empty-day {
            background-color: #ffebee;
            /* Very subtle light red for future days without videos */
        }

        .header-container {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 20px;
        }

        .empty-message {
            text-align: center;
            padding: 30px;
            color: #666;
            font-style: italic;
        }

        .notification {
            position: fixed;
            top: 20px;
            right: 20px;
            padding: 15px;
            border-radius: 5px;
            color: white;
            z-index: 1000;
            transition: opacity 0.5s;
            display: none;
        }

        .success {
            background-color: #28a745;
        }

        .error {
            background-color: #dc3545;
        }

        /* Mobile view styles */
        @media (max-width: 768px) {
            .calendar-grid {
                display: block;
            }

            .calendar-day-header {
                display: none;
            }

            .calendar-day {
                width: 100%;
                min-height: 60px;
                margin-bottom: 10px;
                border-right: none;
                border-left: 1px solid #ddd;
                border-radius: 4px;
                display: flex;
                flex-direction: column;
            }

            /* Hide entire day rows from other months in mobile view */
            .calendar-day.other-month {
                display: none;
            }

            .day-number {
                position: relative;
                top: 0;
                right: 0;
                width: 100%;
                text-align: left;
                background-color: #f8f9fa;
                border-bottom: 1px solid #ddd;
                padding: 8px;
                margin-bottom: 10px;
                font-size: 1.2em;
                border-radius: 0;
            }

            .video-item {
                margin-top: 5px;
                margin-left: 10px;
                margin-right: 10px;
            }

            .today {
                border: 2px solid #2c3e50 !important;
            }

            .calendar-day:nth-child(7n) {
                border-right: 1px solid #ddd;
            }
        }

        /* Modal styles */
        .modal {
            display: none;
            position: fixed;
            z-index: 1000;
            left: 0;
            top: 0;
            width: 100%;
            height: 100%;
            overflow: auto;
            background-color: rgba(0, 0, 0, 0.4);
        }

        .modal-content {
            background-color: #fefefe;
            margin: 15% auto;
            padding: 20px;
            border: 1px solid #888;
            width: 80%;
            max-width: 500px;
            border-radius: 8px;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        }

        .modal-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding-bottom: 10px;
            margin-bottom: 15px;
            border-bottom: 1px solid #ddd;
        }

        .modal-header h4 {
            margin: 0;
        }

        .close-modal {
            color: #aaa;
            float: right;
            font-size: 28px;
            font-weight: bold;
            cursor: pointer;
        }

        .close-modal:hover {
            color: #000;
        }

        .video-option {
            padding: 10px;
            margin-bottom: 8px;
            border: 1px solid #ddd;
            border-radius: 4px;
            cursor: pointer;
            transition: background-color 0.3s;
        }

        .video-option:hover {
            background-color: #f0f0f0;
        }

        .video-option.selected {
            background-color: #e3f2fd;
            border-color: #2196f3;
        }

        .modal-footer {
            margin-top: 15px;
            padding-top: 15px;
            border-top: 1px solid #ddd;
            text-align: right;
        }

        .btn-assign {
            background-color: #4CAF50;
            color: white;
            border: none;
            padding: 8px 16px;
            border-radius: 4px;
            cursor: pointer;
        }

        .btn-assign:hover {
            background-color: #45a049;
        }

        .btn-assign:disabled {
            background-color: #cccccc;
            cursor: not-allowed;
        }

        .video-list {
            max-height: 300px;
            overflow-y: auto;
        }

        .no-videos-message {
            padding: 20px;
            text-align: center;
            color: #666;
            font-style: italic;
        }
    </style>
</head>

<body>
    <div class='container'>
        {{> languageselector}}
        {{> navmenu}}

        <div class="header-container">
            <h1>Video Calendar</h1>
        </div>

        <div id="notification" class="notification"></div>

        <div class="calendar-container">
            <div class="calendar-header">
                <div class="calendar-navigation">
                    <button id="prev-month" class="calendar-nav">&lt; Previous</button>
                    <h3 id="current-month" class="month-display">{{currentMonth}}</h3>
                    <button id="next-month" class="calendar-nav">Next &gt;</button>
                </div>
            </div>

            <div class="calendar-grid">
                <div class="calendar-day-header">Sunday</div>
                <div class="calendar-day-header">Monday</div>
                <div class="calendar-day-header">Tuesday</div>
                <div class="calendar-day-header">Wednesday</div>
                <div class="calendar-day-header">Thursday</div>
                <div class="calendar-day-header">Friday</div>
                <div class="calendar-day-header">Saturday</div>

                {{#each calendarDays}}
                <div class="calendar-day {{#if otherMonth}}other-month{{/if}} {{#if isToday}}today{{/if}}"
                    data-date="{{date}}">
                    <div class="day-number"></div>
                    {{#each videos}}
                    <div class="video-item 
                    {{#if uploadedAt}}
                        {{#unless (eq status 'uploaded')}} pending-upload {{/unless}} {{/if}}" data-video-id="{{_id}}">
                        {{#if uploadedAt}}
                        {{#unless (eq status "uploaded")}}
                        <span>&#9203;</span> {{! Clock icon - HTML entity code }}
                        {{/unless}}
                        {{/if}}
                        {{#if (eq type "basic")}}
                        BÃ¡sico
                        {{else if (eq type "real")}}
                        Real
                        {{else if (eq type "hidden_files")}}
                        Misterios
                        {{else if (eq type "hidden_beasts")}}
                        Animales
                        {{else}}
                        {{type}}
                        {{/if}}
                    </div>
                    {{/each}}
                </div>
                {{/each}}
            </div>
        </div>
    </div>

    <!-- Modal for assigning videos -->
    <div id="video-assign-modal" class="modal">
        <div class="modal-content">
            <div class="modal-header">
                <h4>Assign Video to <span id="selected-date"></span></h4>
                <span class="close-modal">&times;</span>
            </div>
            <div id="video-list" class="video-list">
                <!-- Videos will be populated here -->
            </div>
            <div class="modal-footer">
                <button id="assign-video-btn" class="btn-assign" disabled>Assign Video</button>
            </div>
        </div>
    </div>

    <script>
        document.querySelectorAll('.video-item').forEach(video => {
            video.addEventListener('click', function () {
                const videoId = this.getAttribute('data-video-id');
                window.location.href = '/videos/list/' + videoId;
            });
        });

        // Update the month display when the page loads
        document.addEventListener('DOMContentLoaded', function () {
            updateMonthDisplay();
            markOtherMonthDays();
            populateDayNumbers();
            markPastDays();

            // Video assignment modal functionality
            const modal = document.getElementById('video-assign-modal');
            const closeModalBtn = document.querySelector('.close-modal');
            const videoList = document.getElementById('video-list');
            const selectedDateSpan = document.getElementById('selected-date');
            const assignVideoBtn = document.getElementById('assign-video-btn');

            let selectedVideo = null;
            let selectedDateStr = '';

            // Add click event to calendar days that are in current month
            document.querySelectorAll('.calendar-day:not(.other-month)').forEach(day => {
                day.addEventListener('click', function (e) {
                    // Don't trigger if clicking on a video item
                    if (e.target.classList.contains('video-item')) return;

                    const dateObj = new Date(this.getAttribute('data-date'));
                    const day = dateObj.getDate();
                    const month = dateObj.getMonth() + 1;
                    const year = dateObj.getFullYear();

                    // Format as dd-mm-yyyy
                    selectedDateStr = `${day.toString().padStart(2, '0')}-${month.toString().padStart(2, '0')}-${year}`;
                    selectedDateSpan.textContent = selectedDateStr;

                    // Reset selected video
                    selectedVideo = null;
                    assignVideoBtn.disabled = true;

                    // Fetch available videos
                    fetchAvailableVideos(selectedDateStr);

                    // Show modal
                    modal.style.display = 'block';
                });
            });

            // Close modal when clicking X
            closeModalBtn.addEventListener('click', function () {
                modal.style.display = 'none';
            });

            // Close modal when clicking outside
            window.addEventListener('click', function (event) {
                if (event.target === modal) {
                    modal.style.display = 'none';
                }
            });

            // Assign video button click
            assignVideoBtn.addEventListener('click', function () {
                if (selectedVideo) {
                    assignVideoToDate(selectedVideo, selectedDateStr);
                }
            });

            // Function to fetch available videos
            function fetchAvailableVideos(dateStr) {
                videoList.innerHTML = '<div class="no-videos-message">Loading available videos...</div>';
                const lang = localStorage.getItem('lang') || 'en';
                fetch(`/videos/available-for-date/${dateStr}?lang=${lang}`)
                    .then(response => response.json())
                    .then(data => {
                        if (data.success && data.videos.length > 0) {
                            displayVideos(data.videos);
                        } else {
                            videoList.innerHTML = '<div class="no-videos-message">No available videos found.</div>';
                        }
                    })
                    .catch(error => {
                        console.error('Error fetching available videos:', error);
                        videoList.innerHTML = '<div class="no-videos-message">Error loading videos. Please try again.</div>';
                    });
            }

            // Function to display videos in the modal
            function displayVideos(videos) {
                videoList.innerHTML = '';

                videos.forEach(video => {
                    const videoElement = document.createElement('div');
                    videoElement.className = 'video-option';
                    videoElement.dataset.id = video._id;

                    // Display video type and anything else useful
                    videoElement.innerHTML = `
                        <strong>Type:</strong> ${video.type}
                        ${video.series ? `<br><strong>Series:</strong> ${video.series}` : ''}
                        <br><small>Created: ${new Date(video.createdAt).toLocaleDateString()}</small>
                    `;

                    videoElement.addEventListener('click', function () {
                        // Remove selected class from all video options
                        document.querySelectorAll('.video-option').forEach(el => {
                            el.classList.remove('selected');
                        });

                        // Add selected class to clicked video
                        this.classList.add('selected');

                        // Store the selected video ID
                        selectedVideo = this.dataset.id;

                        // Enable assign button
                        assignVideoBtn.disabled = false;
                    });

                    videoList.appendChild(videoElement);
                });
            }

            // Function to assign video to selected date
            function assignVideoToDate(videoId, dateStr) {
                // Convert date string from dd-mm-yyyy to yyyy-mm-dd for API
                const [day, month, year] = dateStr.split('-');
                const formattedDate = `${year}-${month.padStart(2, '0')}-${day.padStart(2, '0')}`;

                fetch(`/videos/${videoId}/upload-date`, {
                    method: 'PUT',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({ uploadDate: formattedDate })
                })
                    .then(response => response.json())
                    .then(data => {
                        if (data.success) {
                            // Show success notification
                            showNotification('Video assigned to date successfully!', true);

                            // Close modal
                            modal.style.display = 'none';

                            // Reload the page after a short delay to show the updated calendar
                            setTimeout(() => {
                                window.location.reload();
                            }, 1500);
                        } else {
                            showNotification(`Failed to assign video: ${data.message}`, false);
                        }
                    })
                    .catch(error => {
                        console.error('Error assigning video:', error);
                        showNotification('Error assigning video. Please try again.', false);
                    });
            }
        });

        document.getElementById('prev-month').addEventListener('click', function () {
            navigateMonth(-1);
        });

        document.getElementById('next-month').addEventListener('click', function () {
            navigateMonth(1);
        });

        function updateMonthDisplay() {
            const urlParams = new URLSearchParams(window.location.search);
            let month = parseInt(urlParams.get('month')) || new Date().getMonth() + 1;
            let year = parseInt(urlParams.get('year')) || new Date().getFullYear();

            const monthNames = [
                'January', 'February', 'March', 'April', 'May', 'June',
                'July', 'August', 'September', 'October', 'November', 'December'
            ];

            const formattedMonth = monthNames[month - 1] + ' ' + year;
            document.getElementById('current-month').textContent = formattedMonth;
        }

        function navigateMonth(direction) {
            const urlParams = new URLSearchParams(window.location.search);
            let month = parseInt(urlParams.get('month') || new Date().getMonth() + 1);
            let year = parseInt(urlParams.get('year') || new Date().getFullYear());
            const lang = localStorage.getItem('lang') || 'en';
            month += direction;

            if (month > 12) {
                month = 1;
                year++;
            } else if (month < 1) {
                month = 12;
                year--;
            }

            window.location.href = `/videos/calendar?month=${month}&year=${year}&lang=${lang}`;
        }

        function showNotification(message, isSuccess) {
            const notification = document.getElementById('notification');
            notification.textContent = message;
            notification.className = `notification ${isSuccess ? 'success' : 'error'}`;
            notification.style.display = 'block';

            setTimeout(() => {
                notification.style.opacity = '0';
                setTimeout(() => {
                    notification.style.display = 'none';
                    notification.style.opacity = '1';
                }, 500);
            }, 3000);
        }

        // Function to mark past days with gray background
        function markPastDays() {
            const today = new Date();
            today.setHours(0, 0, 0, 0);

            // Helper function to check if two dates are the same day
            function isSameDay(date1, date2) {
                return date1.getFullYear() === date2.getFullYear() &&
                    date1.getMonth() === date2.getMonth() &&
                    date1.getDate() === date2.getDate();
            }

            document.querySelectorAll('.calendar-day').forEach(day => {
                const dateStr = day.getAttribute('data-date');

                if (dateStr) {
                    // Directly create a date object from the ISO string
                    const dayDate = new Date(dateStr);

                    // Check if this day is today
                    const isThisToday = isSameDay(dayDate, today);

                    // Get existing classes
                    const isOtherMonth = day.classList.contains('other-month');

                    // Remove any existing special class to avoid conflicts
                    day.classList.remove('past-day', 'future-empty-day');

                    // Add today class if it's today
                    if (isThisToday) {
                        day.classList.add('today');
                    }
                    // If the date is before today and not in another month, mark as past
                    else if (dayDate < today && !isOtherMonth) {
                        day.classList.add('past-day');
                    }
                    // If the date is after today, not in another month
                    else if (dayDate > today && !isOtherMonth) {
                        // Check if the day has any video items
                        const hasVideos = day.querySelector('.video-item') !== null;

                        if (!hasVideos) {
                            day.classList.add('future-empty-day');
                        }
                    }
                }
            });
        }

        // Function to populate day numbers from data-date attributes
        function populateDayNumbers() {
            document.querySelectorAll('.calendar-day').forEach(day => {
                const dateStr = day.getAttribute('data-date');
                if (dateStr) {
                    try {
                        // Extract the day number from the date string
                        const dayDate = new Date(dateStr);
                        dayDate.setDate(dayDate.getDate()); // Subtract one day
                        const dayNumber = dayDate.getDate();

                        // Set the day number in the element
                        const dayNumberElement = day.querySelector('.day-number');
                        if (dayNumberElement) {
                            dayNumberElement.textContent = dayNumber;
                        }
                    } catch (e) {
                        console.error("Error extracting day number:", e);
                    }
                }
            });
        }

        // Function to mark days from other months
        function markOtherMonthDays() {
            const urlParams = new URLSearchParams(window.location.search);
            let currentMonth = parseInt(urlParams.get('month')) || new Date().getMonth() + 1;
            let currentYear = parseInt(urlParams.get('year')) || new Date().getFullYear();

            // Convert to zero-based month for JS Date (Jan=0, Feb=1, etc)
            currentMonth = currentMonth - 1;

            document.querySelectorAll('.calendar-day').forEach(day => {
                const dateStr = day.getAttribute('data-date');
                if (dateStr) {
                    try {
                        const dayDate = new Date(dateStr);
                        const dayMonth = dayDate.getMonth();
                        const dayYear = dayDate.getFullYear();

                        // If the day belongs to a different month than the current view
                        if (dayMonth !== currentMonth || dayYear !== currentYear) {
                            day.classList.add('other-month');
                        } else {
                            day.classList.remove('other-month');
                        }
                    } catch (e) {
                        console.error("Error checking month:", e);
                    }
                }
            });
        }
    </script>
</body>

</html>