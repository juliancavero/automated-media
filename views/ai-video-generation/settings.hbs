<!DOCTYPE html>
<html lang="en">

<head>
    {{> head}}
    <style>
        .detail-card {
            margin-bottom: 20px;
            width: 100%;
        }

        .btn {
            padding: 10px 15px;
            border: none;
            border-radius: 4px;
            cursor: pointer;
            font-weight: 500;
            transition: all 0.3s ease;
        }

        .btn-secondary {
            background-color: #e9ecef;
            color: #333;
        }

        .btn:hover {
            transform: translateY(-2px);
        }

        /* Action Button Styles */
        .action-buttons-section {
            background-color: #f8f9fa;
            border-radius: 8px;
            padding: 20px;
            margin-bottom: 20px;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05);
        }

        .action-buttons-section h2 {
            margin-top: 0;
            margin-bottom: 15px;
            color: #333;
        }

        .button-group {
            display: flex;
            flex-wrap: wrap;
            gap: 15px;
            margin-bottom: 15px;
        }

        .action-button {
            padding: 12px 20px;
            background-color: #007bff;
            color: white;
            border: none;
            border-radius: 4px;
            cursor: pointer;
            transition: background-color 0.3s;
            font-weight: 500;
        }

        .action-button:hover {
            background-color: #0056b3;
        }

        #actionResponseMessage {
            margin: 10px 0;
            padding: 10px;
            border-radius: 4px;
            display: none;
        }

        .success-message {
            background-color: #dff0d8;
            color: #3c763d;
            border: 1px solid #d6e9c6;
        }

        .error-message {
            background-color: #f2dede;
            color: #a94442;
            border: 1px solid #ebccd1;
        }

        /* Notification styles */
        .notification {
            position: fixed;
            top: 20px;
            right: 20px;
            padding: 15px;
            border-radius: 5px;
            color: white;
            z-index: 1000;
            transition: opacity 0.5s;
            display: none;
        }

        .success {
            background-color: #28a745;
        }

        .error {
            background-color: #dc3545;
        }

        /* Voice settings styles */
        .voice-settings {
            background-color: #f8f9fa;
            padding: 15px;
            border-radius: 4px;
            margin-bottom: 20px;
            border: 1px solid #dee2e6;
        }

        /* Collapsible section styles */
        .section-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            cursor: pointer;
            margin-bottom: 10px;
        }

        .section-header h3 {
            margin: 0;
        }

        .toggle-icon {
            font-size: 1.2em;
            transition: transform 0.3s ease;
        }

        .toggle-icon.collapsed {
            transform: rotate(180deg);
        }

        .section-content {
            overflow: hidden;
            transition: max-height 0.3s ease;
            max-height: 1000px;
        }

        .section-content.collapsed {
            max-height: 0;
        }

        .selector-row {
            display: flex;
            flex-wrap: wrap;
            gap: 15px;
            margin-bottom: 15px;
        }

        .selector-container {
            flex: 1;
            min-width: 200px;
        }

        .save-config-btn {
            background-color: #007bff;
            color: white;
        }

        .save-config-btn:hover {
            background-color: #0069d9;
        }

        .save-success {
            color: #28a745;
            margin-left: 10px;
            display: none;
        }

        /* Templates section styles */
        .templates-container {
            background-color: #f8f9fa;
            padding: 15px;
            border-radius: 4px;
            margin-top: 20px;
            margin-bottom: 20px;
            border: 1px solid #dee2e6;
        }

        .templates-grid {
            display: grid;
            grid-template-columns: repeat(2, 1fr);
            gap: 15px;
            margin-top: 15px;
        }

        .template-card {
            border: 1px solid #ddd;
            border-radius: 4px;
            padding: 15px;
            background-color: white;
        }

        .template-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 10px;
        }

        .template-title {
            font-weight: bold;
            margin: 0;
        }

        .template-preview {
            font-size: 0.9em;
            color: #6c757d;
            margin-bottom: 10px;
            white-space: pre-wrap;
            overflow: hidden;
            text-overflow: ellipsis;
            max-height: 100px;
        }

        .copy-btn {
            background-color: #007bff;
            color: white;
            border: none;
            padding: 5px 10px;
            border-radius: 4px;
            cursor: pointer;
        }

        .copy-btn:hover {
            background-color: #0069d9;
        }

        .copied-message {
            display: none;
            color: #28a745;
            font-size: 0.9em;
            margin-left: 10px;
        }

        /* Created Stories Section Styles */
        .created-stories-container {
            background-color: #f8f9fa;
            padding: 15px;
            border-radius: 4px;
            margin-top: 20px;
            margin-bottom: 20px;
            border: 1px solid #dee2e6;
        }

        .titles-textarea {
            width: 100%;
            min-height: 150px;
            margin: 10px 0;
            padding: 10px;
        }

        .story-type-select {
            margin-bottom: 15px;
        }
    </style>
</head>

<body>
    <div class="container mt-4">
        {{> languageselector}}
        {{> navmenu}}

        <h1>Application Settings</h1>

        <!-- Relaunch and management buttons section -->
        <div class="action-buttons-section">
            <h2>Maintenance Actions</h2>
            <div class="button-group">
                <button id="relaunchImagesBtn" class="action-button">Relaunch Failed Images</button>
                <button id="relaunchAudiosBtn" class="action-button">Relaunch Failed Audios</button>
                <button id="relaunchMissingDescriptionsBtn" class="action-button">Generate Missing Descriptions</button>
            </div>
            <div id="actionResponseMessage"></div>
        </div>

        <div id="notification" class="notification"></div>

        <!-- Voice settings section -->
        <div class="voice-settings">
            <div class="section-header" onclick="toggleSection('voiceSettings')">
                <h3>Voice Settings</h3>
                <span class="toggle-icon" id="voiceSettingsIcon">↑</span>
            </div>
            <div class="section-content" id="voiceSettingsContent">
                <div class="selector-row">
                    <div class="selector-container">
                        <label for="languageSelect">Language:</label>
                        <select id="languageSelect" class="form-control">
                            <option value="">Select a language</option>
                        </select>
                    </div>
                    <div class="selector-container">
                        <label for="voiceSelect">Voice:</label>
                        <select id="voiceSelect" class="form-control" disabled>
                            <option value="">Select a voice</option>
                        </select>
                    </div>
                </div>
                <button id="saveConfigBtn" class="btn save-config-btn" disabled>Save Configuration</button>
                <span id="saveSuccess" class="save-success">✓ Configuration saved!</span>
            </div>
        </div>

        <!-- Templates section -->
        <div class="templates-container">
            <div class="section-header" onclick="toggleSection('templates')">
                <h3>Prompt Templates</h3>
                <span class="toggle-icon" id="templatesIcon">↑</span>
            </div>
            <div class="section-content" id="templatesContent">
                <p>Select a template to use as a starting point for your prompts. Click to copy to clipboard.</p>
                <div class="templates-grid" id="templatesGrid">
                    <!-- Templates will be loaded here -->
                    <div class="loading-templates">Loading templates...</div>
                </div>
            </div>
        </div>

        <!-- Created Stories section -->
        <div class="created-stories-container">
            <div class="section-header" onclick="toggleSection('createdStories')">
                <h3>Created Stories Manager</h3>
                <span class="toggle-icon" id="createdStoriesIcon">↑</span>
            </div>
            <div class="section-content" id="createdStoriesContent">
                <p>Manage your created stories by type. Enter one title per line.</p>
                <div class="form-group story-type-select">
                    <label for="storyTypeSelect">Select Story Type:</label>
                    <select id="storyTypeSelect" class="form-control">
                        <option value="">Select a type</option>
                    </select>
                </div>
                <textarea id="titlesList" class="titles-textarea" placeholder="Enter one title per line"></textarea>
                <button id="saveStoriesBtn" class="btn action-button" disabled>Save Stories</button>
                <span id="storiesSaveSuccess" class="save-success">✓ Stories saved!</span>
            </div>
        </div>

        <div class="mt-4">
            <a href="/videos/list" class="btn btn-secondary">Back to Videos</a>
        </div>
    </div>

    <script>
        let allVoices = [];
        let currentConfig = null;

        document.addEventListener('DOMContentLoaded', async () => {
            // Initialize for voice settings
            try {
                const lang = localStorage.getItem('lang') || 'en';
                const voicesResponse = await fetch('/polly-config/voices');
                if (!voicesResponse.ok) throw new Error('Failed to fetch voices');
                allVoices = await voicesResponse.json();

                const languages = [...new Set(allVoices.map(voice => voice.language))].sort();
                const languageSelect = document.getElementById('languageSelect');
                languages.forEach(language => {
                    const option = document.createElement('option');
                    option.value = language;
                    option.textContent = language;
                    languageSelect.appendChild(option);
                });

                const configResponse = await fetch('/polly-config?lang=' + lang);
                if (configResponse.ok) {
                    currentConfig = await configResponse.json();
                    if (currentConfig.languageCode) {
                        languageSelect.value = currentConfig.languageCode;
                        updateVoiceOptions(currentConfig.languageCode, currentConfig.voiceId);
                    }
                }

                // Load templates
                loadTemplates();

                // Setup action buttons event listeners
                setupActionButtons();

                // Initialize created stories section
                initCreatedStoriesSection();
            } catch (error) {
                console.warn('Initialization error:', error);
            }
        });

        function toggleSection(sectionId) {
            const content = document.getElementById(`${sectionId}Content`);
            const icon = document.getElementById(`${sectionId}Icon`);

            content.classList.toggle('collapsed');
            icon.classList.toggle('collapsed');
        }

        document.getElementById('languageSelect').addEventListener('change', function () {
            const selectedLanguage = this.value;
            updateVoiceOptions(selectedLanguage);
        });

        document.getElementById('voiceSelect').addEventListener('change', function () {
            updateSaveButtonState();
        });

        document.getElementById('saveConfigBtn').addEventListener('click', async function () {
            const languageCode = document.getElementById('languageSelect').value;
            const voiceId = document.getElementById('voiceSelect').value;
            const lang = localStorage.getItem('lang') || 'en';
            if (!languageCode || !voiceId) return;

            try {
                const response = await fetch('/polly-config', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        languageCode,
                        voiceId,
                        lang
                    })
                });

                if (response.ok) {
                    currentConfig = await response.json();
                    const saveSuccess = document.getElementById('saveSuccess');
                    saveSuccess.style.display = 'inline';
                    setTimeout(() => {
                        saveSuccess.style.display = 'none';
                    }, 3000);
                } else {
                    throw new Error('Failed to save configuration');
                }
            } catch (error) {
                console.error('Error saving configuration:', error);
                alert('Failed to save voice configuration. Please try again.');
            }
        });

        function updateVoiceOptions(language, selectedVoice = null) {
            const voiceSelect = document.getElementById('voiceSelect');
            if (!language) {
                voiceSelect.disabled = true;
                while (voiceSelect.options.length > 1) {
                    voiceSelect.remove(1);
                }
                return;
            }

            const filteredVoices = allVoices.filter(voice => voice.language === language);
            while (voiceSelect.options.length > 1) {
                voiceSelect.remove(1);
            }

            filteredVoices.forEach(voice => {
                const option = document.createElement('option');
                option.value = voice.name;
                option.textContent = voice.name;
                voiceSelect.appendChild(option);
            });

            voiceSelect.disabled = false;

            if (selectedVoice && filteredVoices.some(voice => voice.name === selectedVoice)) {
                voiceSelect.value = selectedVoice;
            }
        }

        function updateSaveButtonState() {
            const languageSelect = document.getElementById('languageSelect');
            const voiceSelect = document.getElementById('voiceSelect');
            const saveButton = document.getElementById('saveConfigBtn');

            saveButton.disabled = !languageSelect.value || !voiceSelect.value;
        }

        async function loadTemplates() {
            try {
                const response = await fetch('/templates');
                if (!response.ok) throw new Error('Failed to fetch templates');

                const templates = await response.json();
                const templatesGrid = document.getElementById('templatesGrid');
                templatesGrid.innerHTML = '';

                if (Object.keys(templates).length === 0) {
                    templatesGrid.innerHTML = '<p>No templates found.</p>';
                    return;
                }

                // Loop through the template object
                Object.entries(templates).forEach(([key, content]) => {
                    const templateCard = document.createElement('div');
                    templateCard.className = 'template-card';

                    // Format the key for display (replace underscores with spaces)
                    const displayName = key.replace(/_/g, ' ');

                    templateCard.innerHTML = `
                        <div class="template-header">
                            <h4 class="template-title">${displayName}</h4>
                            <button class="copy-btn" onclick="copyTemplateContent('${key}', this)">Copy</button>
                        </div>
                        <div class="template-preview">${String(content).substring(0, 100)}...</div>
                        <span class="copied-message">Copied to clipboard!</span>
                    `;
                    templatesGrid.appendChild(templateCard);
                });
            } catch (error) {
                console.error('Error loading templates:', error);
                document.getElementById('templatesGrid').innerHTML =
                    '<p>Error loading templates. Please try again later.</p>';
            }
        }

        async function copyTemplateContent(templateKey, button) {
            try {
                const response = await fetch('/templates');
                if (!response.ok) throw new Error('Failed to fetch templates');

                const templates = await response.json();
                const content = templates[templateKey];

                if (!content) throw new Error('Template content not found');

                await navigator.clipboard.writeText(String(content));

                // Show copied message
                const copiedMessage = button.parentElement.parentElement.querySelector('.copied-message');
                copiedMessage.style.display = 'inline';
                setTimeout(() => {
                    copiedMessage.style.display = 'none';
                }, 2000);
            } catch (error) {
                console.error('Error copying template:', error);
                alert('Failed to copy template. Please try again.');
            }
        }

        function setupActionButtons() {
            // Setup for Generate Missing Descriptions button
            const missingDescBtn = document.getElementById('relaunchMissingDescriptionsBtn');
            missingDescBtn.addEventListener('click', async function () {
                missingDescBtn.disabled = true;
                missingDescBtn.innerText = 'Processing...';
                const responseMessage = document.getElementById('actionResponseMessage');

                try {
                    const response = await fetch('/videos/relaunch-missing-descriptions', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                        }
                    });

                    const result = await response.json();

                    responseMessage.classList.remove('error-message', 'success-message');
                    if (result.success) {
                        responseMessage.classList.add('success-message');
                        responseMessage.textContent = `${result.message} (${result.count} videos)`;
                    } else {
                        responseMessage.classList.add('error-message');
                        responseMessage.textContent = result.message;
                    }

                    responseMessage.style.display = 'block';

                    // Hide message after 5 seconds
                    setTimeout(() => {
                        responseMessage.style.display = 'none';
                    }, 5000);
                } catch (error) {
                    responseMessage.classList.add('error-message');
                    responseMessage.textContent = `Error: ${error.message}`;
                    responseMessage.style.display = 'block';
                } finally {
                    missingDescBtn.disabled = false;
                    missingDescBtn.innerText = 'Generate Missing Descriptions';
                }
            });

            // Setup for Relaunch Failed Images button
            const relaunchImagesBtn = document.getElementById('relaunchImagesBtn');
            relaunchImagesBtn.addEventListener('click', async function () {
                const notification = document.getElementById('notification');

                try {
                    const response = await fetch('/images/relaunch-failed', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        }
                    });

                    const result = await response.json();

                    notification.textContent = result.message;
                    notification.className = `notification ${result.success ? 'success' : 'error'}`;
                    notification.style.display = 'block';

                    setTimeout(() => {
                        notification.style.opacity = '0';
                        setTimeout(() => {
                            notification.style.display = 'none';
                            notification.style.opacity = '1';
                        }, 500);
                    }, 3000);
                } catch (error) {
                    console.error('Error:', error);
                    notification.textContent = `Error: ${error.message}`;
                    notification.className = 'notification error';
                    notification.style.display = 'block';
                }
            });

            // Setup for Relaunch Failed Audios button
            const relaunchAudiosBtn = document.getElementById('relaunchAudiosBtn');
            relaunchAudiosBtn.addEventListener('click', async function () {
                const notification = document.getElementById('notification');

                try {
                    const response = await fetch('/audios/relaunch-failed', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        }
                    });

                    const result = await response.json();

                    notification.textContent = result.message;
                    notification.className = `notification ${result.success ? 'success' : 'error'}`;
                    notification.style.display = 'block';

                    setTimeout(() => {
                        notification.style.opacity = '0';
                        setTimeout(() => {
                            notification.style.display = 'none';
                            notification.style.opacity = '1';
                        }, 500);
                    }, 3000);
                } catch (error) {
                    console.error('Error:', error);
                    notification.textContent = `Error: ${error.message}`;
                    notification.className = 'notification error';
                    notification.style.display = 'block';
                }
            });
        }

        async function initCreatedStoriesSection() {
            // Load story types
            try {
                const response = await fetch('/created-stories/types');
                if (!response.ok) throw new Error('Failed to fetch story types');

                const data = await response.json();
                const storyTypeSelect = document.getElementById('storyTypeSelect');

                // Clear existing options (except the placeholder)
                while (storyTypeSelect.options.length > 1) {
                    storyTypeSelect.remove(1);
                }

                // Add types from the API
                data.types.forEach(type => {
                    const option = document.createElement('option');
                    option.value = type;
                    option.textContent = type.charAt(0).toUpperCase() + type.slice(1);
                    storyTypeSelect.appendChild(option);
                });

                // Set up event listeners
                storyTypeSelect.addEventListener('change', loadStoryTitles);
                document.getElementById('saveStoriesBtn').addEventListener('click', saveStoryTitles);

                // Enable textarea if type is selected
                storyTypeSelect.addEventListener('change', function () {
                    const titlesList = document.getElementById('titlesList');
                    titlesList.disabled = !this.value;
                    document.getElementById('saveStoriesBtn').disabled = !this.value;
                });
            } catch (error) {
                console.error('Error loading story types:', error);
            }
        }

        async function loadStoryTitles() {
            const selectedType = document.getElementById('storyTypeSelect').value;
            if (!selectedType) return;

            try {
                const response = await fetch(`/created-stories?type=${selectedType}`);
                if (!response.ok) throw new Error('Failed to fetch stories');

                const data = await response.json();
                const titlesList = document.getElementById('titlesList');

                // Display titles, one per line
                titlesList.value = data.titles ? data.titles.join('\n') : '';
            } catch (error) {
                console.error('Error loading story titles:', error);
                alert('Failed to load story titles. Please try again.');
            }
        }

        async function saveStoryTitles() {
            const selectedType = document.getElementById('storyTypeSelect').value;
            if (!selectedType) return;

            const titleText = document.getElementById('titlesList').value;
            const titles = titleText.split('\n')
                .map(line => line.trim())
                .filter(line => line.length > 0);

            try {
                const response = await fetch('/created-stories', {
                    method: 'PUT',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        type: selectedType,
                        titles: titles
                    })
                });

                if (!response.ok) throw new Error('Failed to save stories');

                // Show success message
                const saveSuccess = document.getElementById('storiesSaveSuccess');
                saveSuccess.style.display = 'inline';
                setTimeout(() => {
                    saveSuccess.style.display = 'none';
                }, 3000);

            } catch (error) {
                console.error('Error saving story titles:', error);
                alert('Failed to save story titles. Please try again.');
            }
        }
    </script>
</body>

</html>