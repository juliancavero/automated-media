<html lang='en'>

<head>
  {{> head}}
  <style>
    .video-container {
      margin-bottom: 20px;
      display: flex;
      justify-content: center;
    }

    video {
      width: 50%;
      border-radius: 4px;
      max-height: 350px;
    }

    .description-container {
      margin-bottom: 20px;
    }

    .description-header {
      display: flex;
      justify-content: space-between;
      align-items: center;
      margin-bottom: 10px;
    }

    .description-text {
      padding: 15px;
      background-color: #f9f9f9;
      border: 1px solid #ddd;
      border-radius: 4px;
      min-height: 100px;
    }

    .toast {
      position: fixed;
      bottom: 20px;
      right: 20px;
      background-color: #28a745;
      color: white;
      padding: 10px 20px;
      border-radius: 4px;
      box-shadow: 0 2px 10px rgba(0, 0, 0, 0.2);
      opacity: 0;
      transition: opacity 0.3s;
    }

    .toast.show {
      opacity: 1;
    }

    .actions {
      display: flex;
      flex-direction: column;
      gap: 10px;
      margin-top: 20px;
      justify-content: center;
      align-items: center;
    }

    .actions>* {
      width: 50%;
      text-align: center;
      box-sizing: border-box;
      padding: 10px 15px;
      border: none;
      border-radius: 4px;
      cursor: pointer;
      font-weight: bold;
      transition: background-color 0.3s;
      text-decoration: none;
      display: block;
      color: white;
    }

    .btn-outlined {
      background-color: transparent;
      border: 2px solid #007bff;
      color: #007bff;
    }

    .centered {
      display: flex;
      justify-content: center;
      align-items: center;
    }
  </style>
</head>

<body>
  <div class='container'>
    <!-- Navigation menu -->
    {{> navmenu}}

    <div class='video-container'>
      <video controls>
        <source src='{{videoUrl}}' type='video/mp4' />
        Your browser does not support the video tag.
      </video>
    </div>

    <div class='description-container'>
      <div class='description-header'>
        <h2>Description</h2>
      </div>
      {{#if description}}
      <div class='description-text' id='description-text'>{{description}}</div>
      {{else}}
      <div class='description-text centered' id='description-text'><button id="generate-btn" class='btn btn-outlined'
          onclick='generateDescription()'>GENERAR</button></div>
      {{/if}}
    </div>

    <div class='actions'>
      <button class='btn btn-primary' onclick='copyDescription()'>COPIAR</button>
      <button class='btn btn-success' onclick='markAsUploaded()'>MARCAR</button>
      <button class='btn btn-danger' onclick='deleteVideo()'>BORRAR</button>
    </div>
  </div>

  <div id='toast' class='toast'>Text copied to clipboard!</div>

  <script>
    function copyDescription() {
      const descText = document.getElementById('description-text').innerText;
      navigator.clipboard.writeText(descText);
    }

    async function markAsUploaded() {
      const videoId = '{{videoId}}';
      try {
        const response = await fetch(`/videos/${videoId}/mark-uploaded`, {
          method: 'PUT',
        });
        if (response.ok) {
          alert('Video marked as uploaded!');
          window.location.reload();
        } else {
          const errorData = await response.json();
          alert(`Failed to mark as uploaded: ${errorData.message}`);
        }
      } catch (error) {
        alert(`An error occurred while marking the video as uploaded.`);
      }
    }

    async function deleteVideo() {
      if (!confirm('¿Estás seguro de que quieres borrar este video?')) {
        return;
      }

      const videoId = '{{videoId}}';
      try {
        const response = await fetch(`/videos/${videoId}`, {
          method: 'DELETE',
        });

        if (response.ok) {
          alert('Video borrado con éxito de la base de datos y Cloudinary');
          window.location.href = '/';  // Redirect to home page
        } else {
          const errorData = await response.json();
          alert(`Error al borrar el video: ${errorData.message}`);
        }
      } catch (error) {
        alert('Ha ocurrido un error al intentar borrar el video');
        console.error(error);
      }
    }

    async function generateDescription() {
      const videoId = '{{videoId}}';
      const generateBtn = document.getElementById('generate-btn');

      try {
        // Set button to loading state
        generateBtn.disabled = true;
        generateBtn.textContent = 'Generando...';

        const response = await fetch(`/videos/${videoId}/generate-description`, {
          method: 'POST',
        });

        if (response.ok) {
          alert('Description generated successfully!');
          window.location.reload();
        } else {
          const errorData = await response.json();
          alert(`Failed to generate description: ${errorData.message}`);
          // Reset button if there's an error
          generateBtn.disabled = false;
          generateBtn.textContent = 'GENERAR';
        }
      } catch (error) {
        alert('An error occurred while generating the description.');
        console.error(error);
        // Reset button if there's an error
        generateBtn.disabled = false;
        generateBtn.textContent = 'GENERAR';
      }
    }
  </script>
</body>

</html>